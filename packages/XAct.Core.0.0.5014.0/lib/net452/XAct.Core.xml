<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XAct.Core</name>
    </assembly>
    <members>
        <member name="T:XAct.Services.Comm.ServiceModel.AppSoapException">
            <summary>
            A generic FaultContract.
            </summary>
        </member>
        <member name="M:XAct.Services.Comm.ServiceModel.AppSoapException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Services.Comm.ServiceModel.AppSoapException"/> class.
            </summary>
            <internal>
            Always provide an argumentless constructor.
            </internal>
        </member>
        <member name="M:XAct.Services.Comm.ServiceModel.AppSoapException.#ctor(System.Boolean,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Services.Comm.ServiceModel.AppSoapException"/> class.
            </summary>
            <param name="publicApi">if set to <c>true</c> [public API].</param>
            <param name="e">The e.</param>
            <param name="includeStack">if set to <c>true</c> [include stack].</param>
        </member>
        <member name="M:XAct.Services.Comm.ServiceModel.AppSoapException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Services.Comm.ServiceModel.AppSoapException.Method">
            <summary>
            Gets or sets the name of the method that threw the Exception.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:XAct.Services.Comm.ServiceModel.AppSoapException.Assembly">
            <summary>
            Gets or sets the name of the method that threw the Exception.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:XAct.Services.Comm.ServiceModel.AppSoapException.Stack">
            <summary>
            Gets or sets the service side's stack trace.
            </summary>
            <value>
            The stack.
            </value>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem"/> class.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="expectedResponse">The expected response.</param>
            <param name="timeOut">The time span.</param>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.#ctor(System.Uri,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="expectedResponse">The expected response.</param>
            <param name="timeOut">The time span.</param>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.Title">
            <summary>
            The displayable title (often just set to the Url).
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.Url">
            <summary>
            Gets or sets the URL to test.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.ExpectedHttpResponseCode">
            <summary>
            Expected Response. Default is 200 (OK)
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem.#ctor(System.String,System.String)">
            <summary>
            XMLs the document status service connector x path definition.
            </summary>
            <param name="title">The title.</param>
            <param name="xpath">The xpath.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem.Title">
            <summary>
            Gets or sets the displayable Title.
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem.XPath">
            <summary>
            The XPath to the setting.
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.UrlAccessibilityStatusServiceConnectorFactory">
            <summary>
            A Factory for creating <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector"/>
            instances.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.UrlAccessibilityStatusServiceConnectorFactory.Create(System.String,System.String,System.String,XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfigurationItem[])">
            <summary>
            Creates a <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector"/>
            </summary>
            <param name="name">The name.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="urlInfos">The urls.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.XmlDocumentStatusServiceConnectorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.XmlDocumentStatusServiceConnectorFactory.Create(System.String,System.String,System.String,System.String,XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfigurationItem[])">
            <summary>
            Creates an instance of a <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector"/>
            </summary>
            <param name="name"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="relativeFilePath"></param>
            <param name="xpathDefinitions"></param>
            <returns></returns>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfiguration">
            <summary>
            Configuration for <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector"/>
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfiguration.FilePath">
            <summary>
            Gets or sets the absolute or relative file path to the XmlDocument.
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfiguration.XPathDefinitions">
            <summary>
            Gets the list of XPaths to investigate within the document.
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector">
            <summary>
            A StatusService Connector that reports on the ability to access remote Urls.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector.#ctor(XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector"/> class.
            </summary>
            <param name="uriAccessibilityFeedServiceConnectorConfiguration">The URI accessibility feed service connector configuration.</param>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector.Get(System.Object,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets the <see cref="T:XAct.Diagnostics.Services.Implementations.StatusResponse"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="startTimeUtc">The start time UTC.</param>
            <param name="endTimeUtc">The end time UTC.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector.Configuration">
            <summary>
            The configuration package for this Connector.
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration">
            <summary>
            The configuration package for an instance of
            <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnector"/>
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration"/> class.
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration.Timeout">
            <summary>
            Gets or sets the max time to wait for a response.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.UrlAccessibilityStatusServiceConnectorConfiguration.Urls">
            <summary>
            Gets the list of urls to check.
            </summary>
            <value>
            The urls.
            </value>
        </member>
        <member name="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector">
            <summary>
            An implementation of <see cref="T:XAct.Diagnostics.Status.Connectors.IStatusServiceConnector"/>
            that returns the values of AppSettings on the Server.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector.#ctor(XAct.Environment.IEnvironmentService,XAct.IO.IIOService,XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnectorConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector"/> class.
            </summary>
            <param name="environmentService">The environment service.</param>
            <param name="ioService">The io service.</param>
            <param name="connectorConfiguration">The connector configuration.</param>
        </member>
        <member name="M:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector.Get(System.Object,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets the <see cref="T:XAct.Diagnostics.Services.Implementations.StatusResponse"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="startTimeUtc">The start time UTC.</param>
            <param name="endTimeUtc">The end time UTC.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.Diagnostics.Status.Connectors.Implementations.XmlDocumentStatusServiceConnector.Configuration">
            <summary>
            Gets or sets the configuration package for this Connector.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="T:XAct.XmlDocumentExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.XmlDocumentExtensions.ReadXPathValues(System.Xml.XmlDocument,System.String,System.Collections.Generic.Dictionary{System.String,System.String},XAct.Environment.IEnvironmentService,XAct.IO.IIOService)">
            <summary>
            Helper tool to read from an xml file a certain set of XPaths.
            </summary>
            <param name="emptyXmlDocument">The empty XML document.</param>
            <param name="relativeOrfileFullName">Full name of the relative orfile.</param>
            <param name="xPaths">The x paths.</param>
            <param name="environmentService">The environment service.</param>
            <param name="ioService">The io service.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.XmlDocumentExtensions.ReadXPathValues(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads the x path values.
            </summary>
            <param name="emptyXmlDocument">The empty XML document.</param>
            <param name="xPaths">The x paths.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.XmlDocumentExtensions.ToStreamWithDeclaration(System.Xml.Linq.XDocument,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Converts the given xDcoument To a stream, with declaration.
            </summary>
            <param name="xDocument">The x document.</param>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="T:XAct.Services.FFConversionService">
            <summary>
            Implementation of the 
            <see cref="T:XAct.Services.IConversionService"/> service
            to convert an object to another type.
            </summary>
        </member>
        <member name="M:XAct.Services.FFConversionService.#ctor(XAct.Diagnostics.ITracingService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Services.FFConversionService"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
        </member>
        <member name="M:XAct.Services.FFConversionService.Convert``1(System.Object)">
            <summary>
            Convert a type to another type.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Services.FFConversionService.Convert(System.Object,System.Type)">
            <summary>
            Convert a type to another type.
            </summary>
            <param name="source">The source.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.SerializedObject">
            <summary>
            An object to pass serialized objects across the wire in a controlled way
            (some serializers will fail).
            </summary>
            <internal>
            Used internally by <c>XAct.Settings.Setting</c>
            to pass values across the wire to the Client.
            </internal>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.SerializedObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.SerializedObject"/> class.
            </summary>
        </member>
        <member name="M:XAct.SerializedObject.#ctor(XAct.SerializationMethod,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.SerializedObject"/> class.
            </summary>
            <param name="serializationMethod">The serialization method.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.SerializedObject.Id">
            <summary>
            Gets or sets an (optional) Id.
            Useful for sending a couple of Settings across the wire 
            and know which one we're talking about.
            </summary>
            <value>The id.</value>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.SerializedObject.SerializationMethod">
            <summary>
            Gets or sets the serialization method employed.
            </summary>
            <value>The serialization method.</value>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.SerializedObject.SerializedValueType">
            <summary>
            Gets or sets the serialized <see cref="P:XAct.SerializedObject.SerializedValue"/> <see cref="P:XAct.SerializedObject.SerializedValueType"/>.
            </summary>
            <value>The type.</value>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.SerializedObject.SerializedValue">
            <summary>
            Gets or sets the serialized value.
            </summary>
            <value>The value.</value>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Collections.PriorityQueue`1">
            <summary>
            
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Collections.PriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Clear">
            <summary>
            Clears the Queue.
            </summary>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the queue contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Dequeue">
            <summary>
            Dequeues an element from the queue, and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Dequeue(System.Int32)">
            <summary>
            Dequeues an element from the queue witht the specified priority, and returns it.
            </summary>
            <param name="priority">The priority.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueues the specified item, at the given priority.
            </summary>
            <param name="value">The value.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Peek">
            <summary>
            Gets the next Item, returning it, without removing it from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.System#Collections#Generic#IEnumerable{TItem}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.ToArray">
            <summary>
            Converts the queue to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:XAct.Collections.PriorityQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:XAct.Collections.PriorityQueue`1.IsEmpty">
            <summary>
            Gets a value indicating whether this queue is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:XAct.Collections.PriorityQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:XAct.Collections.PriorityQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="T:XAct.Collections.PriorityQueue`1.Resources">
            <summary>
            Class of Reosources
            </summary>
        </member>
        <member name="F:XAct.Collections.PriorityQueue`1.Resources.ArgumentCannotBeNull">
            <summary>
            Local Resource string.
            </summary>
        </member>
        <member name="T:XAct.Collections.PriorityQueue`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Collections.PriorityQueue`1.Enumerator`1">
            <summary>
            The Enumerator for the <see cref="T:XAct.Collections.PriorityQueue`1"/>
            </summary>
            <typeparam name="TTItem">The type of the T item.</typeparam>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enumerator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Collections.PriorityQueue`1.Enumerator`1"/> class.
            </summary>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enumerator`1.#ctor(XAct.Collections.PriorityQueue{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Collections.PriorityQueue`1.Enumerator`1"/> class.
            </summary>
            <param name="priorityQueue">The priority queue.</param>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:XAct.Collections.PriorityQueue`1.Enumerator`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:XAct.Collections.PriorityQueue`1.Enumerator.#ctor(XAct.Collections.PriorityQueue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Collections.PriorityQueue`1.Enumerator"/> class.
            </summary>
            <param name="priorityQueue">The priority queue.</param>
        </member>
        <member name="T:XAct.Collections.WrappedList`1">
            <summary>
            </summary>
            <typeparam name = "TItem"></typeparam>
            <remarks>
              <para>
                Collection to wrap the EntityCollection
                allowing end users to not have to reference
                the LLBL Generated assemblies where the 
                EntityCollection was defined.
              </para>
            </remarks>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.#ctor">
            <summary>
              Initializes a new instance of the 
              <see cref="T:XAct.Collections.WrappedList`1"/> class.
            </summary>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.#ctor(System.Collections.IList)">
            <summary>
              Initializes a new instance of the 
              <see cref="T:XAct.Collections.WrappedList`1"/> class.
            </summary>
            <param name="innerList">The innerlist.</param>
            <exception cref="T:System.ArgumentNullException">
              An exception is raised if the 
              <paramref name="innerList"/> 
              argument is null.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.RemoveAt(System.Int32)">
            <summary>
              Removes the list item 
              at the specified index.
            </summary>
            <param name = "index">
              The zero-based index of the item to remove.
            </param>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> 
              is not a valid index in the 
              list.
            </exception>
            <exception cref = "T:System.NotSupportedException">
              The list is read-only.
              -or-
              The list has a fixed size.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Clear">
            <summary>
              Removes all items from the 
              list.
            </summary>
            <exception cref = "T:System.NotSupportedException">
              The list is read-only.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates 
              through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> 
              object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Add(System.Object)">
            <summary>
              Adds an item to the 
              <see cref = "T:System.Collections.IList" />.
            </summary>
            <param name = "value">The <see cref = "T:System.Object" />
              to add to the 
              <see cref = "T:System.Collections.IList" />.
            </param>
            <returns>
              The position into which the new element was inserted.
            </returns>
            <exception cref = "T:System.NotSupportedException">
              The <see cref = "T:System.Collections.IList" /> is read-only.
              -or-
              The <see cref = "T:System.Collections.IList" /> has a fixed size.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Contains(System.Object)">
            <summary>
              Determines whether the 
              <see cref = "T:System.Collections.IList" /> 
              contains a specific value.
            </summary>
            <param name = "value">
              The <see cref = "T:System.Object" /> to locate in the 
              <see cref = "T:System.Collections.IList" />.</param>
            <returns>
              true if the 
              <see cref = "T:System.Object" /> is found in the 
              <see cref = "T:System.Collections.IList" />; otherwise, false.
            </returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.IndexOf(System.Object)">
            <summary>
              Determines the index of a specific item in the 
              <see cref = "T:System.Collections.IList" />.
            </summary>
            <param name = "value">
              The <see cref = "T:System.Object" /> 
              to locate in the <see cref = "T:System.Collections.IList" />.
            </param>
            <returns>
              The index of <paramref name = "value" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Insert(System.Int32,System.Object)">
            <summary>
              Inserts an item to the 
              <see cref = "T:System.Collections.IList" /> 
              at the specified index.
            </summary>
            <param name = "index">
              The zero-based index at which 
              <paramref name = "value" /> should be inserted.
            </param>
            <param name = "value">
              The <see cref = "T:System.Object" /> 
              to insert into the 
              <see cref = "T:System.Collections.IList" />.</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> is not a valid index in the 
              <see cref = "T:System.Collections.IList" />.
            </exception>
            <exception cref = "T:System.NotSupportedException">
              The <see cref = "T:System.Collections.IList" /> is read-only.
              -or-
              The <see cref = "T:System.Collections.IList" /> has a fixed size.
            </exception>
            <exception cref = "T:System.NullReferenceException">
              <paramref name = "value" /> is null reference in the 
              <see cref = "T:System.Collections.IList" />.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Remove(System.Object)">
            <summary>
              Removes the first occurrence of a specific 
              object from the <see cref = "T:System.Collections.IList" />.
            </summary>
            <param name = "value">The <see cref = "T:System.Object" /> 
              to remove from the <see cref = "T:System.Collections.IList" />.</param>
            <exception cref = "T:System.NotSupportedException">
              The <see cref = "T:System.Collections.IList" /> is read-only.
              -or-
              The <see cref = "T:System.Collections.IList" /> has a fixed size.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.CopyTo(System.Array,System.Int32)">
            <summary>
              Copies the elements of the 
              <see cref = "T:System.Collections.ICollection" />
              to an 
              <see cref = "T:System.Array" />, 
              starting at a particular 
              <see cref = "T:System.Array" /> index.
            </summary>
            <param name = "array">
              The one-dimensional 
              <see cref = "T:System.Array" /> 
              that is the destination of the elements copied from 
              <see cref = "T:System.Collections.ICollection" />. 
              The <see cref = "T:System.Array" /> must have zero-based indexing.</param>
            <param name = "index">
              The zero-based index in 
              <paramref name = "array" /> 
              at which copying begins.</param>
            <exception cref = "T:System.ArgumentNullException">
              <paramref name = "array" /> is null.
            </exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">
              <paramref name = "index" /> is less than zero.
            </exception>
            <exception cref = "T:System.ArgumentException">
              <paramref name = "array" /> is multidimensional.
              -or-
              <paramref name = "index" /> 
              is equal to or greater than the length of 
              <paramref name = "array" />.
              -or-
              The number of elements in the source 
              <see cref = "T:System.Collections.ICollection" /> 
              is greater than the available space from 
              <paramref name = "index" /> 
              to the end of the destination 
              <paramref name = "array" />.
            </exception>
            <exception cref = "T:System.ArgumentException">
              The type of the source 
              <see cref = "T:System.Collections.ICollection" /> 
              cannot be cast automatically to the type of the destination 
              <paramref name = "array" />.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.XAct#IHasInnerItemReadOnly#GetInnerItem``1">
            <summary>
              The inner <see cref="T:System.Collections.IList"/> that this List wraps.
            </summary>
            <remarks>
              This property is an explicit implementation 
              of the <see cref="T:XAct.Collections.IWrappedList"/> interface
              as it should not be readily accessible
            </remarks>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.IndexOf(`0)">
            <summary>
              Returns the index of the item within the collection.
            </summary>
            <param name = "item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Insert(System.Int32,`0)">
            <summary>
              Inserts the item at the specified index.
            </summary>
            <param name = "index">The index.</param>
            <param name = "item">The item.</param>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Add(`0)">
            <summary>
              Adds the specified item to the collection.
            </summary>
            <param name = "item">The item.</param>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Contains(`0)">
            <summary>
              Determines whether The list contains the specified item.
            </summary>
            <param name = "item">The item.</param>
            <returns>
              <c>true</c> if the list contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.CopyTo(`0[],System.Int32)">
            <summary>
              Copies the elements of the System.Collections.ICollection to an System.Array,
              starting at a particular System.Array index.
            </summary>
            <param name="array">
              The one-dimensional System.Array that is the destination of the elements
              copied from System.Collections.ICollection. The System.Array must have zero-based
              indexing.
            </param>
            <param name="arrayIndex">
              The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
              array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              index is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
              array is multidimensional.
            </exception>
            <exception cref="T:System.ArgumentException">
              index is equal to or greater than the length of array.
            </exception>
            <exception cref="T:System.ArgumentException">
              The number of elements in the source System.Collections.ICollection
              is greater than the available space from 
              index to the end of the destination
              array.
            </exception>
            <exception cref="T:System.ArgumentException">
              The type of the source System.Collections.ICollection 
              cannot be cast automatically to the 
              type of the destination array.
            </exception>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.Remove(`0)">
            <summary>
              Removes the specified item from the collection.
            </summary>
            <param name = "item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Collections.WrappedList`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref = "T:System.Collections.IEnumerator" /> 
              object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.Item(System.Int32)">
            <summary>
              Gets or sets the 
              item 
              at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.Count">
            <summary>
              Gets the number of elements contained in the 
              list.
            </summary>
            <value></value>
            <returns>
              The number of elements contained in the 
              list.
            </returns>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.IsReadOnly">
            <summary>
              Gets a value indicating whether the 
              list is read-only.
            </summary>
            <value></value>
            <returns>true if the list is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.IsFixedSize">
            <summary>
              Gets a value indicating whether the 
              <see cref = "T:System.Collections.IList" /> 
              has a fixed size.
            </summary>
            <value></value>
            <returns>
              true if the <see cref = "T:System.Collections.IList" />
              has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
              Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.IsSynchronized">
            <summary>
              Gets a value indicating whether access to the 
              <see cref = "T:System.Collections.ICollection" /> 
              is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>
              true if access to the 
              <see cref = "T:System.Collections.ICollection" /> 
              is synchronized (thread safe); 
              otherwise, false.
            </returns>
        </member>
        <member name="P:XAct.Collections.WrappedList`1.SyncRoot">
            <summary>
              Gets an object that can be used to synchronize access to the
              <see cref = "T:System.Collections.ICollection" />.
            </summary>
            <value></value>
            <returns>
              An object that can be used to synchronize access to the 
              <see cref = "T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="T:XAct.Diagnostics.TraceSwitchServiceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.ITraceSwitchServiceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchServiceConfiguration.Enabled">
            <summary>
            Gets or sets a value indicating whether Tracing is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchServiceConfiguration.ReflectionEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the <see cref="T:XAct.Diagnostics.ITraceSwitchService"/>'s fine grain (but expensive) Tracing by Reflection.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchServiceConfiguration.CacheTraceSwitches">
            <summary>
            Gets or sets a value indicating whether [cache trace switches].
            </summary>
            <value>
              <c>true</c> if [cache trace switches]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchServiceConfiguration.DefaultTraceLevel">
            <summary>
            Gets or sets the default trace level for new TraceSwitchs created per Type/Assebly.
            </summary>
            <value>
            The default trace level.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchServiceConfiguration.DefaultApplicationTraceLevel">
            <summary>
            Gets or sets the default Application TraceLevel.
            </summary>
            <value>
            The default application trace level.
            </value>
        </member>
        <member name="M:XAct.Diagnostics.TraceSwitchServiceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.TraceSwitchServiceConfiguration"/> class.
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.TraceSwitchServiceConfiguration.Enabled">
            <summary>
            Gets or sets a value indicating whether Tracing is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.TraceSwitchServiceConfiguration.ReflectionEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the <see cref="T:XAct.Diagnostics.ITraceSwitchService"/>'s fine grain (but expensive) Tracing by Reflection.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.TraceSwitchServiceConfiguration.CacheTraceSwitches">
            <summary>
            Gets or sets a value indicating whether [cache trace switches].
            </summary>
            <value>
              <c>true</c> if [cache trace switches]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.TraceSwitchServiceConfiguration.DefaultTraceLevel">
            <summary>
            Gets or sets the default trace level for new TraceSwitchs created per Type/Assebly.
            </summary>
            <value>
            The default trace level.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.TraceSwitchServiceConfiguration.DefaultApplicationTraceLevel">
            <summary>
            Gets or sets the default Application TraceLevel.
            </summary>
            <value>
            The default application trace level.
            </value>
        </member>
        <member name="T:XAct.Diagnostics.Implementations.NullTracingService">
            <summary>
            A trace service that does nothing (ie fast).
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.Implementations.TracingServiceBase">
            <summary>
            Abstract base implementation of 
            <see cref="T:XAct.Diagnostics.ITracingService"/>
            <para>
            Provides a timed flush mechanism
            and a fine grain TraceSwitch mechanism to 
            any subclass.
            </para>
            <para>
            See:
            <see cref="T:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService"/>
            as well as 
            <c>Log4NetLoggingService</c>, and 
            <c>EnterpriseLoggingServce</c>
            </para>
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.#ctor(XAct.Diagnostics.ITraceSwitchService)">
            <summary>
              Initializes the 
              TracingService implementation.
            </summary>
            <remarks>
              A common static constructor is used to initialize
              the internal flush timer mechanism.
            </remarks>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.DebugTrace(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Logs the given message to the current Trace output.
            <para>
            Important: this method is only available in debug mode, 
            as it is decorated with ConditionalAttribute("DEBUG")
            </para>
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.DebugTrace(System.Int32,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Logs the given message to the current Trace output.
            <para>
            Important: this method is only available in debug mode, 
            as it is decorated with ConditionalAttribute("DEBUG")
            </para>
            <para>
            If called directly, the stackTraceOffset should be 0.
            But if this infrastructure service is called indirectly
            (eg wrapped by a business service) the stackTraceOffset should be 1)
            </para>
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.DebugTraceException(XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception.
            <para>
            Important: this method is only available in debug mode, 
            as it is decorated with ConditionalAttribute("DEBUG")
            </para>
            <para>
            In most cases, use the other overload as it does not require specifying the ErrorLevel.
            </para>
            	<para>
            This overload can be useful to log exceptions as Warnings only.
            </para>
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.DebugTraceException(System.Int32,XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception.
            <para>
            Important: this method is only available in debug mode, 
            as it is decorated with ConditionalAttribute("DEBUG")
            </para>
            <para>
            In most cases, use the other overload as it does not require specifying the ErrorLevel.
            </para>
            	<para>
            This overload can be useful to log exceptions as Warnings only.
            </para>
            <para>
            If called directly, the stackTraceOffset should be 0.
            But if this infrastructure service is called indirectly
            (eg wrapped by a business service) the stackTraceOffset should be 1)
            </para>
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.QuickTrace(System.String,System.Object[])">
            <summary>
            QuickTraces the specified message, prefixing it with the name of the method.
            <para>
            IMPORTANT: Use sparingly! In fact, avoid using this method except in the rarest of cases,
            as it bypasses the logic of the TraceLevel arguments in the other
            message signature.
            </para>
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.Trace(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
              Logs the given message to the current Trace output.
            </summary>
            <param name = "traceLevel">The level of this message.</param>
            <param name = "message">The message.</param>
            <param name = "arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.Trace(System.Int32,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
              Logs the given message to the current Trace output.
            <para>
            If called directly, the stackTraceOffset should be 0.
            But if this infrastructure service is called indirectly
            (eg wrapped by a business service) the stackTraceOffset should be 1)
            </para>
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name = "traceLevel">The level of this message.</param>
            <param name = "message">The message.</param>
            <param name = "arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.TraceException(XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
              Logs the exception.
              <para>
                In most cases, use the other overload as it does not require specifying the ErrorLevel.
              </para>
              <para>
                This overload can be useful to log exceptions as Warnings only.
              </para>
            </summary>
            <param name = "traceLevel">The level of this message.</param>
            <param name = "exception">The exception.</param>
            <param name = "message">The message.</param>
            <param name = "messageArguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.TraceException(System.Int32,XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
              Logs the exception.
              <para>
                In most cases, use the other overload as it does not require specifying the ErrorLevel.
              </para>
              <para>
                This overload can be useful to log exceptions as Warnings only.
              </para>
            <para>
            If called directly, the stackTraceOffset should be 0.
            But if this infrastructure service is called indirectly
            (eg wrapped by a business service) the stackTraceOffset should be 1)
            </para>
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name = "traceLevel">The level of this message.</param>
            <param name = "exception">The exception.</param>
            <param name = "message">The message.</param>
            <param name = "messageArguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.ResetFlushTimer">
            <summary>
              Resets the flush timer.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
              Event handler for when the flush timer goes off.
            <para>
            Flushes the Logging mechanism.
            </para>
            </summary>
            <internal>
            <para>
            An example of what to put in the override would be:
            <code>
            <![CDATA[
            System.Diagnostics.Trace.Flush();
            ]]>
            </code>
            </para>
            </internal>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.WriteLineIf(System.Int32,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
              Traces the given 
              <paramref name = "message" /> 
              if the relevent TraceSwitch's Level is 
              equal or higher than the given 
              <paramref name = "traceLevel" /> 
              argument.
            </summary>
            <param name="stackTraceFrameOffset">1 for invoker, 2 for invoker's invoker, etc.</param>
            <param name = "traceLevel">
              The level that the relevant TraceSwitch has to be at to log this message.
            </param>
            <param name = "message">The text message to trace.</param>
            <param name = "messageArguments">
              The optional arguments to string format into the message.
            </param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.WriteLineIf(System.Type,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
              Trace the given 
              <paramref name = "message" /> 
              if the relevent TraceSwitch's Level is 
              equal or higher than the given 
              <paramref name = "traceLevel" /> 
              argument.
            </summary>
            <remarks>
            <para>
            In other words, if the config file switch is Info (3)
            and the message's switch level is Verbose (4), then it
            it is not logged. 
            </para>
            </remarks>
            <param name = "classInstanceType">Type of the class instance.</param>
            <param name = "traceLevel">
              The level that the relevant TraceSwitch has to be at to log this message.
            </param>
            <param name = "message">The text message to trace.</param>
            <param name = "args">
              The optional arguments to string format into the message.
            </param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.WriteLine(XAct.Diagnostics.TraceLevel,System.String)">
            <summary>
            When implemented by subclasses, 
            writes the given message to the 
            specific implementation's logging system.
            </summary>
            <internal>
            Invoked only after passing WriteLineIf.
            </internal>
            <param name="traceLevel">The message's tracelevel</param>
            <param name="message">The already string formatted message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.StringFormatMessage(System.String,System.Object[])">
            <summary>
            Helper method to string format the message using
            an <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            </summary>
            <param name="message">The message.</param>
            <param name="messageArguments">The message arguments.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.PrefixMessage(XAct.Diagnostics.TraceLevel,System.String)">
            <summary>
              Prefixes a message intended for Debug output with 
              same stuff that Trace prepends.
              <para>
                Invoked only if going to Debug listeners (ie Verbose).
              </para>
            </summary>
            <param name = "traceLevel">
              The level that the relevant TraceSwitch has to be at to log this message.
            </param>
            <param name = "message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.TraceException(System.Type,XAct.Diagnostics.TraceLevel,System.Exception)">
            <summary>
            Print out error message, and 5 deeper messages, and finally, the stack trace
            </summary>
            <param name="invokingClassInstance"></param>
            <param name="traceLevel"></param>
            <param name="exception"></param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TracingServiceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.#ctor(XAct.Diagnostics.ITraceSwitchService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Implementations.NullTracingService"/> class.
            </summary>
            <param name="traceSwitchService">The trace switch service.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.WriteLine(XAct.Diagnostics.TraceLevel,System.String)">
            <summary>
            Does nothing.
            </summary>
            <param name="traceLevel">The message's tracelevel</param>
            <param name="message">The already string formatted message.</param>
            <internal>
            Invoked only after passing WriteLineIf.
              </internal>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.DebugTrace(System.Int32,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.DebugTrace(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.DebugTraceException(System.Int32,XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.DebugTraceException(XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.QuickTrace(System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Does nothing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
            <internal>
            An example of what to put in the override would be:
              <code>
              <![CDATA[
            System.Diagnostics.Trace.Flush();
            ]]>
              </code>
              </internal>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.Trace(System.Int32,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.Trace(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="message">The message.</param>
            <param name="arguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.TraceException(System.Int32,XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="stackTraceFrameOffset"></param>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="messageArguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.NullTracingService.TraceException(XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Does nothing.
            </summary>
            <param name="traceLevel">The level of this message.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="messageArguments">Any optional arguments to format into the message.</param>
        </member>
        <member name="T:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService">
            <summary>
              An implementation of <see cref="T:XAct.Diagnostics.ITracingService"/>, 
              using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService.#ctor(XAct.Diagnostics.ITraceSwitchService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService"/> class.
            </summary>
            <internal><para>7/31/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService.WriteLine(XAct.Diagnostics.TraceLevel,System.String)">
            <summary>
            Writes the given message to the 
            specific implementation's logging system.
            </summary>
            <internal>
            Invoked only after passing WriteLineIf.
            </internal>
            <param name="traceLevel">The message's tracelevel</param>
            <param name="message">The already string formatted message.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.SystemDiagnosticsTracingService.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Event handler for when the flush timer goes off.
            <para>
            Flushes the Logging mechanism.
            </para>
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:XAct.Diagnostics.Implementations.TraceSwitchService">
            <summary>
            Service that returns TraceSwitches based on context.
            </summary>
            <intenral>
            Used within DefaultLoggingService.
            </intenral>
            
        </member>
        <member name="T:XAct.Diagnostics.ITraceSwitchService">
            <summary>
            
            </summary>
            <internal><para>7/31/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.GetNamedTraceSwitch(System.String,XAct.Diagnostics.TraceLevel)">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration found, returns a TraceSwitch, with default
            TraceLevel set to what was given in 
            <paramref name="defaultTraceLevel"/>.
            </summary>
            <param name="traceSwitchName">Name of the switch.</param>
            <param name="defaultTraceLevel">Level of trace if not defined in configuration.</param>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.GetApplicationTraceSwitch">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration is found for a TraceSwitch with the name "Application"
            returns a TraceSwitch, with default TraceLevel set to Off.
            </summary>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.ShouldTrace(XAct.Diagnostics.TraceLevel,System.Type)">
            <summary>
            Verify message should be traced, based on the given class Type.
            <para>
            In order to trace, the switch's trace level has 
            to be equal to or higher than the given
            trace level.
            </para>
            <para>
            Note that this works (seemingly backwards) before Error=1, Info=3, Verbose=4...
            </para>
            </summary>
            <param name="traceLevel">The trace level.</param>
            <param name="classInstanceType">Type of the class instance.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.GetAssemblyTraceSwitch(System.Reflection.Assembly)">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration is found for a TraceSwitch with the name 
            of the Assembly returns a TraceSwitch, 
            with default TraceLevel set to Off.
            </summary>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.GetTraceSwitch(System.Int32)">
            <summary>
              Gets the <see cref="T:System.Diagnostics.TraceSwitch"/> for the given class Type.
            <para>
            Use offset = 1 for invoking class.
            </para>
            </summary>
            <returns>
              A <see cref="T:System.Diagnostics.TraceSwitch"/>.
            </returns>
            <param name="stackTraceFrameOffset">StackTrace Frame Offset.</param>
        </member>
        <member name="M:XAct.Diagnostics.ITraceSwitchService.GetTraceSwitchByType(System.Type)">
            <summary>
              Gets the TraceSwitch for the given class Type.
            </summary>
            <param name = "instanceType">Type of the instance.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchService.Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchService.Enabled">
            <summary>
            Gets or sets a value indicating whether Tracing is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchService.ReflectionEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XAct.Diagnostics.ITraceSwitchService"/> is enabled.
            <para>
            Note: TraceSwitching via Reflection is very expensive.
            </para>
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.ITraceSwitchService.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceSwitch"/> 
            with the specified trace switch name.
            </summary>
            <value></value>
        </member>
        <member name="F:XAct.Diagnostics.Implementations.TraceSwitchService.ApplicationTraceSwitchName">
            <summary>
            Name of application wide TraceSwitch.
            <para>
            Value: 'Application'
            </para>
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.#ctor(XAct.Diagnostics.SharedState.ITraceSwitchServiceState,XAct.Diagnostics.ITraceSwitchServiceConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Diagnostics.Implementations.TraceSwitchService"/> class.
            </summary>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.GetNamedTraceSwitch(System.String,XAct.Diagnostics.TraceLevel)">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration found, returns a TraceSwitch, with default
            TraceLevel set to what was given in 
            <paramref name="defaultTraceLevel"/>.
            </summary>
            <param name="traceSwitchName">Name of the switch.</param>
            <param name="defaultTraceLevel">Level of trace if not defined in configuration.</param>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.GetApplicationTraceSwitch">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration is found for a TraceSwitch with the name "Application"
            returns a TraceSwitch, with default TraceLevel set to Off.
            </summary>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.ShouldTrace(XAct.Diagnostics.TraceLevel,System.Type)">
            <summary>
            Verify message should be traced, based on the given class Type.
            <para>
            In order to trace, the switch's trace level has 
            to be equal to or higher than the given
            trace level.
            </para>
            <para>
            Note that this works (seemingly backwards) before Error=1, Info=3, Verbose=4...
            </para>
            </summary>
            <param name="traceLevel">The trace level.</param>
            <param name="classInstanceType">Type of the class instance.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.GetAssemblyTraceSwitch(System.Reflection.Assembly)">
            <summary>
            Builds a traceSwitch from info found in configuration.
            If no configuration is found for a TraceSwitch with the name 
            of the Assembly returns a TraceSwitch, 
            with default TraceLevel set to Off.
            </summary>
            <returns>A TraceSwitch</returns>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.GetTraceSwitch(System.Int32)">
            <summary>
              Gets the cached <see cref="T:System.Diagnostics.TraceSwitch"/> for the given class Type.
            <para>
            Use offset = 1 for invoking class.
            </para>
            </summary>
            <returns>
              A <see cref="T:System.Diagnostics.TraceSwitch"/>.
            </returns>
            <param name="stackTraceFrameOffset">StackTrace Frame Offset.</param>
        </member>
        <member name="M:XAct.Diagnostics.Implementations.TraceSwitchService.GetTraceSwitchByType(System.Type)">
            <summary>
              Gets the cached <see cref="T:System.Diagnostics.TraceSwitch"/> for the given class Type.
            </summary>
            <param name="instanceType">Type of the instance.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.Diagnostics.Implementations.TraceSwitchService.Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Diagnostics.Implementations.TraceSwitchService.Enabled">
            <summary>
            Gets or sets a value indicating whether Tracing is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.Implementations.TraceSwitchService.ReflectionEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:XAct.Diagnostics.ITraceSwitchService"/>'s fine grain TraceSwitch by Reflection on Type/Assembly is enabled.
            <para>
            Note: TraceSwitching for Logging is very expensive.
            </para>
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.Implementations.TraceSwitchService.DefaultTraceLevel">
            <summary>
            Gets or sets the default trace level for new TraceSwitchs created per Type/Assebly.
            </summary>
            <value>
            The default trace level.
            </value>
        </member>
        <member name="P:XAct.Diagnostics.Implementations.TraceSwitchService.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceSwitch"/> 
            with the specified trace switch name.
            </summary>
            <value></value>
        </member>
        <member name="T:XAct.Diagnostics.Implementations.TraceSwitchServiceState">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Diagnostics.SharedState.ITraceSwitchServiceState">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Domain.ObservableModelBase">
            <summary>
            <para>
            An <c>XActLib</c> contract.
            </para>
            Abstract base class for an Observable Model that has properties
            that when updated raise the PropertyChanged event.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="F:XAct.Domain.ObservableModelBase.BackupValues">
            <summary>
            The dictionary of saved values, in case <see cref="M:XAct.Domain.ObservableModelBase.CancelEdit"/> is invoked.
            </summary>
            <internal>
            Note that the dictionary can't be any more type specific than 'object'.
            </internal>
        </member>
        <member name="F:XAct.Domain.ObservableModelBase.CurrentValues">
            <summary>
            The dictionary of current values (accessed via <see cref="M:XAct.Domain.ObservableModelBase.GetPropertyValue``1(System.String)"/>).
            </summary>
            <internal>
            Note that the dictionary can't be any more type specific than 'object'.
            </internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.OnPropertyChanged(System.String)">
            <summary>
            Called when a observable property is changed.
            <para>
            <code>
            <![CDATA[
            public string FirstName {
             get {GetPropertyValue("FirstName");}
             set {SetPropertyValue("FirstName", value);}
            }
            ]]>
            </code>
            </para>
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.Domain.ObservableModelBase.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.OnPropertyChanging(System.String)">
            <summary>
            Called when a observable property is changing.
            <para>
            <code>
            <![CDATA[
            public string FirstName {
             get {GetPropertyValue("FirstName");}
             set {SetPropertyValue("FirstName", value);}
            }
            ]]>
            </code>
            </para>
            </summary>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.Domain.ObservableModelBase.PropertyChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or 
            <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.GetPropertyValue``1(System.String)">
            <summary>
            Gets the property value from the internal current value dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.SetPropertyValue``1(System.String,System.Object)">
            <summary>
            Sets the property value into the internal current value dictionary.
            <para>
            Note that if the value matches what is there already, no
            change takes place, and <see cref="M:XAct.Domain.ObservableModelBase.OnPropertyChanged(System.String)"/>
            is not invoked.
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.ExtractPropertyFromDictionaryValue``1(System.String)">
            <summary>
            <para>
            This could get more complicated at a later date.
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.SetPropertyValueInDictionaryValue(System.String,System.Object)">
            <summary>
            Sets the property value in dictionary value.
            <para>
            This could get more complicated at a later date.
            </para>
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.ValidatePropertyValue(System.String,System.Object)">
            Validates the value against any
            System.ComponentModel.DataAnnotations rules
            applied to the property.
            
            Name of the property.
            The value.
        </member>
        <member name="M:XAct.Domain.ObservableModelBase.CloneDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            Clones the dictionary.
            
            
            Invoked by 
            ,
            , 
            and
            
            
            The dictionary whose values are to be copied from.
            The dictionary the values are to be copied to.
        </member>
        <member name="E:XAct.Domain.ObservableModelBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="E:XAct.Domain.ObservableModelBase.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Environment.Implementations.FFEnvironmentService">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Environment.IFFEnvironmentService">
            <summary>
            
            </summary>
        </member>
        <member name="P:XAct.Environment.IFFEnvironmentService.Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="M:XAct.Environment.Implementations.FFEnvironmentService.#ctor(XAct.Environment.IFFEnvironmentServiceConfiguration,XAct.Environment.IEnvironmentManagementService)">
            <summary>
            Is the environment service.
            </summary>
            <param name="environmentServiceConfiguration">The environment service configuration.</param>
            <param name="environmentManagementService">The environment management service.</param>
        </member>
        <member name="M:XAct.Environment.Implementations.FFEnvironmentService.MapPath(System.String)">
            <summary>
            Maps the VirtualPath ('~/SubDir/SomeFile.htm') to the Apps dir ('c:\somedir\SubDir\SomeFile.htm');
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
            <internal><para>8/2/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Environment.Implementations.FFEnvironmentService.XAct#Environment#IEnvironmentService#Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Environment.Implementations.FFEnvironmentService.Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="T:XAct.Environment.Implementations.FFPrincipalService">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Environment.IFFPrincipalService">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Environment.Implementations.FFPrincipalService.#ctor(XAct.Diagnostics.ITracingService,XAct.Environment.IEnvironmentService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Environment.Implementations.FFPrincipalService"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="environmentService">The environment service.</param>
        </member>
        <member name="P:XAct.Environment.Implementations.FFPrincipalService.Principal">
            <summary>
            Sets the thread principal (and HttpContext User if within a web application).
            </summary>
        </member>
        <member name="P:XAct.Environment.Implementations.FFPrincipalService.CurrentIdentityIdentifier">
            <summary>
            Gets the current identity identifier (the most unique identifier for a user).
            <para>
            For a windows identity, this will be the SID, others, the name -- but 
            note that a name is not guaranteed to be consistent.
            </para>
            </summary>
            <value>
            The current identity identifier.
            </value>
        </member>
        <member name="T:XAct.Environment.Implementations.FFEnvironmentServiceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Environment.IFFEnvironmentServiceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Environment.Implementations.FFEnvironmentServiceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Environment.Implementations.FFEnvironmentServiceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:XAct.EditableValue`1">
            <summary>
            An abstract base class for holding settings that can be set Transacted (committed, or rolled back).
            </summary>
            <remarks>
            <para>
            Note that due to implicit Operators one
            can interact with an Editable object
            as follows:
            <code>
            <![CDATA[
            EditableValueBase<string> demo = new EditableValueBase<string>();
            demo.Value = "Works";
            string s = demo; //no need to do the full verbose 's = demo.Value'
            //although this is not allowed: 
            //demo = "as does this";
            ]]>
            </code>
            </para>
            </remarks>
            <typeparam name="TValue">The type of the value.</typeparam>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="F:XAct.EditableValue`1._previousValue">
            <summary>
            The cached previous value that was backing <see cref="P:XAct.EditableValue`1.Value"/>
            <para>
            Set when <see cref="M:XAct.EditableValue`1.BeginEdit"/> is invoked.
            </para>
            </summary>
        </member>
        <member name="F:XAct.EditableValue`1._currentValue">
            <summary>
            THe current value backing <see cref="P:XAct.EditableValue`1.Value"/>
            </summary>
            <internal>
            The Generic value will be serialized as an Object.
            </internal>
        </member>
        <member name="F:XAct.EditableValue`1._serializedValue">
            <summary>
            
            </summary>
            <internal>
            Because Type is not serializable via WCF, we have to pass the Type
            and Value as strings.
            </internal>
        </member>
        <member name="M:XAct.EditableValue`1.BeginEdit">
            <summary>
            Begins an edit on an object.
            <para>Member defined in<see cref="T:System.ComponentModel.IEditableObject"/></para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            <para>Member defined in<see cref="T:System.ComponentModel.IEditableObject"/></para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or 
            <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            <para>Member defined in<see cref="T:System.ComponentModel.IEditableObject"/></para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.GetValue">
            <summary>
            Gets the value.
            <para>Member defined in<see cref="T:XAct.EditableValue`1"/></para>
            </summary>
            <returns></returns>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.SetValue(`0)">
            <summary>
            Sets the value if different to current value.
            <para>
            Note: Modifies <see cref="P:XAct.EditableValue`1.ModelState"/> only if value is different than current value.
            </para>
            <para>
            Invokes <see cref="M:XAct.EditableValue`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)"/>
            and
            <see cref="M:XAct.EditableValue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            </para>
            <para>Member defined in<see cref="T:XAct.EditableValue`1"/></para>
            </summary>
            <param name="value">The value.</param>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.EditableValue`1.Serialize">
            <summary>
            Serializes <see cref="P:XAct.EditableValue`1.Value"/> as a <see cref="T:XAct.SerializedObject"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.EditableValue`1.OnPropertyChanged(System.String)">
            <summary>
            Invoked when <see cref="P:XAct.EditableValue`1.Value"/> is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.EditableValue`1.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.OnPropertyChanging(System.String)">
            <summary>
            Invoked when <see cref="P:XAct.EditableValue`1.Value"/> is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.EditableValue`1.PropertyChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValue`1.op_Implicit(XAct.EditableValue{`0})~`0">
            <summary>
            Performs an implicit conversion from 
            <see cref="T:XAct.EditableValue`1"/> to 
            the expected Type.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="E:XAct.EditableValue`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            <para>
            See <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="E:XAct.EditableValue`1.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            <para>
            See <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>
            </para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.EditableValue`1.Editing">
            <summary>
            Gets or sets a value indicating whether 
            <see cref="M:XAct.EditableValue`1.BeginEdit"/> has been invoked.
            <para>
            Reset by <see cref="M:XAct.EditableValue`1.CancelEdit"/> or 
            <see cref="M:XAct.EditableValue`1.EndEdit"/>
            </para>
            </summary>
            <value><c>true</c> if editing; otherwise, <c>false</c>.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.EditableValue`1.ValueType">
            <summary>
            Gets or sets the Type of <see cref="P:XAct.EditableValue`1.Value"/>.
            </summary>
            <value>The type of the value.</value>
            <internal><para>8/13/2011: Sky</para></internal>
            <internal>
            Do NOT mark as DataMember: Type is !serializable
            </internal>
        </member>
        <member name="P:XAct.EditableValue`1.Value">
            <summary>
            Gets or sets the Typed value.
            </summary>
            <value>The value.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.EditableValue`1.ModelState">
            <summary>
            Gets the <see cref="P:XAct.EditableValue`1.ModelState"/> of the object.
            <para>
            Model states will be:
            <code>
            <![CDATA[
            * New (Initial State)
            * UnchangedExisting
            * Modified (when SetValue() is invoked).
            * Deleted
            ]]>
            </code>
            </para>
            <para>Member defined in<see cref="T:XAct.IHasModelState"/></para>
            </summary>
        </member>
        <member name="T:XAct.Events.Implementations.EventAggregatorService">
            <summary>
            Implementation of the <see cref="T:XAct.Events.IEventAggregatorService"/>
            to provide a means to pass messages among loosely coupled elements.
            </summary>
            <internal>
            See: http://www.codeproject.com/Articles/52810/Event-Aggregator-with-Specialized-Listeners
            <para>
            Going forward: http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.20).aspx
            </para>
            </internal>
        </member>
        <member name="M:XAct.Events.Implementations.EventAggregatorService.#ctor(XAct.Diagnostics.ITracingService,XAct.Events.IEventAggregatorServiceSubscriberServiceState)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Events.Implementations.EventAggregatorService"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="subscriberCache">The subscriber cache.</param>
        </member>
        <member name="M:XAct.Events.Implementations.EventAggregatorService.Publish``1(``0)">
            <summary>
            Publishes the specified message
            to registered
            <see cref="T:XAct.Events.IEventSubscriber"/>s.
            </summary>
            <typeparam name="T">The <see cref="T:XAct.Events.IEvent"/></typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:XAct.Events.Implementations.EventAggregatorService.AddSubscriber(XAct.Events.IEventSubscriber)">
            <summary>
            Adds the given subscriber.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:XAct.Events.Implementations.EventAggregatorService.RemoveSubscriber(XAct.Events.IEventSubscriber)">
            <summary>
            Removes the subscriber.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:XAct.AppDomainExtensions">
            <summary>
            Extensions to the AppDomain object.
            </summary>
            <summary>
            Extensions to the AppDomain object
            </summary>
            <internal>8/15/2011: Sky</internal>
        </member>
        <member name="M:XAct.AppDomainExtensions.RegisterBindings(System.Boolean,System.Action{XAct.Services.IBindingDescriptor},System.Action{XAct.Services.IBindingDescriptorResult},System.Collections.Generic.IEnumerable{XAct.Services.IBindingDescriptorBase})">
            <summary>
            Initializes the library services.
            <para>
            Invoked by XAct.Services.IoC.Ninject's NinjectBootstrapper and
            XAct.Services.IoC.Unity's UnityBootstrapper, etc.
            </para>
            </summary>
            <param name="optionalOnErrorBindingCallback">The optional pre binding callback.</param>
            <param name="optionalPostBindingCallback">The optional post binding callback.</param>
            <param name="servicesToRegisterBeforeXActLibServices">The services to register before x act library services.</param>
            <param name="performPreScan">if set to <c>true</c> perform an (expensive) pre scan of assemblies for Binding information to do after processing the <paramref name="servicesToRegisterBeforeXActLibServices"/> bindings.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.RegisterBindings(System.AppDomain,XAct.Services.IoC.Initialization.InitializeLibraryBindingsResults@,System.Boolean,System.Action{XAct.Services.IBindingDescriptor},System.Action{XAct.Services.IBindingDescriptorResult},System.Collections.Generic.IEnumerable{XAct.Services.IBindingDescriptorBase})">
            <summary>
            Initializes the library services.
            <para>
            Invoked by XAct.Services.IoC.Ninject's NinjectBootstrapper and
            XAct.Services.IoC.Unity's UnityBootstrapper, etc.
            </para>
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="bindingResults">The binding results.</param>
            <param name="performPreScan">if set to <c>true</c> perform an (expensive) pre scan of assemblies for Binding information to do after processing the <paramref name="servicesToRegisterBeforeXActLibServices"/> bindings.</param>
            <param name="optionalOnErrorBindingCallback">The optional pre binding callback.</param>
            <param name="optionalPostBindingCallback">The optional post binding callback.</param>
            <param name="servicesToRegisterBeforeXActLibServices">The services to register before x act library services.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Aha! LoadAllLocalAndReferencedAssemblies *does* work.</exception>
        </member>
        <member name="M:XAct.AppDomainExtensions.ScanForDefaultBindingDescriptors(System.AppDomain,XAct.Services.IoC.Initialization.BindingScanResults@,XAct.Services.IBindingDescriptor[],System.Boolean)">
            <summary>
            Scans discoverable assemblies for Class instances
            decorated with <see cref="T:XAct.Services.DefaultBindingImplementationAttribute"/>.
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="bindingScanResults">The results.</param>
            <param name="dependenciesToRegisterFirst">The services to register first.</param>
            <param name="skipDuplicates">if set to <c>true</c> [skip duplicates].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.LoadAllLocalAndReferencedAssemblies(System.AppDomain,XAct.Services.IoC.Initialization.BindingScanResults@)">
            <summary>
            Loads all local and referenced assemblies.
            <para>
            Invoked by <c>AppDomainExtensions.RegisterBindings</c>
            </para>
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="bindingScanResults">The binding scan results.</param>
        </member>
        <member name="M:XAct.AppDomainExtensions.LoadAllAssembliesInDomain(System.AppDomain)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Forces the Loading of all assemblies in domain.
            <para>
            WARNING: Unfortunately, it uses Directory.GetFiles
            which requires priveleges beyond what is available in a sandboxed environment.
            </para>
            </summary>
            <param name="appDomain">The app domain.</param>
        </member>
        <member name="M:XAct.AppDomainExtensions.LoadAllReferencedAssemblies(System.AppDomain,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Forces the Loading of all assemblies in domain.
            <para>
            Note that it does not use System.Directory, so should
            work in a Sandboxed environment.
            </para>
            </summary>
            <param name="appDomain">The app domain.</param>
            <param name="avoidLoadingSystemAssemblies">if set to <c>true</c> [remove system assemblies].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.LoadAllAssembliesInBaseDirectory(System.AppDomain)">
            <summary>
            Loads all assemblies in base directory.
            </summary>
            <param name="appDomain">The application domain.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.LoadAllAssembliesInPrivateBinDirectory(System.AppDomain,System.String)">
            <summary>
            Loads all assemblies in privte bin directory (ie AppDomain.CurrentDomain.SetupInformation.PrivateBinPath)
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="discoveryPath">The discovery path.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesDecoratedWithAttribute(System.AppDomain,System.Type,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets all the the types in all loaded assemblies, 
            that are decorated with attributes.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            Type[] results = appDomain.GetTypesDecoratedWithAttributes(
              typeof(DefaultServiceImplementationAttribute),
              false);
            ]]>
            </code>
            </para>
            </summary>
            <param name="appDomain">The app domain.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesDecoratedWithAttribute``1(System.AppDomain,System.Func{``0,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
              <para>
            An XActLib Extension.
              </para>
            Gets the types decorated with attribute.
              <para>
            Usage Example:
              <code>
              <![CDATA[
            Type[] results = appDomain.GetTypesDecoratedWithAttributes
              <DefaultServiceImplementationAttribute>(null, false,true);
            ]]>
              </code>
              </para>
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="appDomain">The app domain.</param>
            <param name="filter">The filter.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <param name="allowMultiples">if set to <c>true</c> [allow multiples].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesDecoratedWithAttribute``2(System.AppDomain,System.Func{``0,System.Boolean})">
            <summary>
            Find all class definitions in the library and current application
            that are decorated with the given Attribute, that match the given
            Interface, instantiate them, and invoke the given Action on them.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TClass">The type of the class contract.</typeparam>
            <param name="appDomain">The app domain.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetAllTypesImplementingOpenGenericType``1(System.Reflection.Assembly[])">
            <summary>
            Gets the type of all types implementing open generic.
            </summary>
            <typeparam name="TOpenGenericType">The type of the open generic type.</typeparam>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetAllTypesImplementingOpenGenericType``1(System.AppDomain)">
            <summary>
            Gets all types implementing the given open generic contract.
            </summary>
            <typeparam name="TOpenGenericType">The type of the open generic type.</typeparam>
            <param name="appDomain">The application domain.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesImplementingType``1(System.AppDomain,System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Gets the type of the types inmplementing.
            </summary>
            <typeparam name="IDbModelBuilder">The type of the database model builder.</typeparam>
            <param name="appDomain">The application domain.</param>
            <param name="instantiableOnly">if set to <c>true</c> [instantiable only].</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesImplementingType(System.AppDomain,System.Type,System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Gets the type of the types inmplementing.
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="modelBuilderType">Type of the model builder.</param>
            <param name="instantiableOnly">if set to <c>true</c> [instantiable only].</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypesDecoratedWithAttributeAndInstantiateAndInvokeInterfaceMethod``2(System.AppDomain,System.Action{``1},System.Func{``0,System.Boolean},System.Action{System.Boolean,System.Type,``0,``1})">
            <summary>
            Find all class definitions in the library and current application
            that are decorated with the given Attribute, that match the given
            Interface, instantiate them, and invoke the given Action on them.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TClassContract">The type of the class contract.</typeparam>
            <param name="appDomain">The app domain.</param>
            <param name="action">The action.</param>
            <param name="filter">The filter.</param>
            <param name="optionalInvokeCallback">The optional invoke callback.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:XAct.AppDomainExtensions.IsPermitted(System.AppDomain,System.Security.IPermission)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            <para>
            An extension method to check whether the user
            has the required permission.
            </para>
            <para>
            Usage Example:
            <code>
            <![CDATA[
            var requestedPermission = new FileIOPermission(FileIOPermissionAccess.Write,folder);
            
            if (AppDomain.IsPermitted(requestedPermission))
            {
            //go ahead...
            }else{
              //...hum...
            }
            ]]>
            </code>
            </para>
            </summary>
            <param name="appDomain"></param>
            <param name="requestedPermission"></param>
        </member>
        <member name="M:XAct.AppDomainExtensions.SetThreadToCurrentWindowsThread(System.AppDomain)">
            <summary>
            Sets the thread to current windows thread.
            <para>
            See: http://support.microsoft.com/kb/301256
            </para>
            </summary>
            <param name="appDomain">The app domain.</param>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypeFromTypeFullName(System.AppDomain,System.String,System.String)">
            <summary>
            Gets the Type from just the Type's fullname (which may be FQN or partial).
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AppDomainExtensions.GetTypeFromTypeFullName(System.AppDomain,XAct.IHasAssemblyAndTypeNames)">
            <summary>
            Gets the full name of the type from type.
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.AppDomainExtensions.BaseDir">
            <summary>
            Gets the base dir in which to search for assemblies.
            <para>
            Determined from AppDomain.CurrentDomain.BaseDirectory
            </para>
            <para>
            Note that will be foo/bar/bin/debug in NUnit and Console apps.
            In an web app, this will be the base dir - not the bin\debug or bin\release
            directory.
            </para>
            <para>
            Returned without final slash in both cases.
            </para>
            </summary>
            <internal>
            Note that XAct.Services.IoC has a class that is also
            called <see cref="T:XAct.AppDomainExtensions"/>
            </internal>
        </member>
        <member name="T:XAct.Exceptions.Configuration.Implementations.ExceptionHandlingServiceConfigurations">
            <summary>
            An implementation of the 
            <see cref="T:XAct.Exceptions.Configuration.IExceptionHandlingServiceConfigurations"/>
            contract.
            <para>
            This configuration object is used by an
            implementation of the <see cref="T:XAct.Exceptions.IExceptionHandlingManagementService"/>
            </para>
            <para>
            Note that the default behaviour is to register it into the DependencyInjectionContainer as a Singleton.
            </para>
            </summary>
        </member>
        <member name="M:XAct.Exceptions.Configuration.Implementations.ExceptionHandlingServiceConfigurations.Add(XAct.Exceptions.IExceptionHandlingConfiguration,System.String)">
            <summary>
            Adds the specified exception handling description to the inner cache.
            </summary>
            <param name="exceptionHandlingDescription">The exception handling description.</param>
            <param name="category">The category.</param>
        </member>
        <member name="M:XAct.Exceptions.Configuration.Implementations.ExceptionHandlingServiceConfigurations.Get(System.Exception,System.String)">
            <summary>
            Gets from the inner cache an <see cref="T:XAct.Exceptions.ExceptionHandlingConfiguration"/>
            that matches the given <paramref name="exception"/>
            </summary>
            <param name="exception">The exception.</param>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.AssemblyExtensions">
            <summary>
            Extensions to the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
            <remarks>
            <para>
            Example:
            <code>
            <![CDATA[
            Bitmap bitmap = 
              Assembly
                .GetExecutingAssembly()
                .LoadBitmapFromResource("Resources.Progress.gif");
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:XAct.AssemblyExtensions.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the assembly version.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            Assembly assembly = Assembly.GetEntryAssembly();
            Version version = assembly.GetAssemblyVersion();
            ]]>
            </code>
            </para>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AssemblyExtensions.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the assembly file version,
            correctly handling any '*' characters.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            Assembly assembly = Assembly.GetEntryAssembly();
            Version version = assembly.GetAssemblyFileVersion();
            ]]>
            </code>
            </para>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AssemblyExtensions.GetAssemblyProductVersion(System.Reflection.Assembly)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the assembly product version,
            correctly handling any '*' characters.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            Assembly assembly = Assembly.GetEntryAssembly();
            Version version = assembly.GetAssemblyProductVersion();
            ]]>
            </code>
            </para>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AssemblyExtensions.GetReferencedAssemblyLocations(System.Reflection.Assembly)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the path/location of referenced assemblies.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            Assembly assembly = Assembly.GetEntryAssembly();
            
            string[] results = 
               assembly.GetReferencedAssemblyLocations();
            ]]>
            </code>
            </para>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AssemblyExtensions.LoadBitmapFromResource(System.Reflection.Assembly,System.String)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Loads the bitmap from resource.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="imageResourcePath">The image resource path.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.AssemblyExtensions.IsAssemblyDebugBuild(System.Reflection.Assembly)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Determines whether the assembly was built in debug mode or not.
            <para>
            Could be used for post deployment checks.
            </para>
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if [is assembly debug build] [the specified assembly]; otherwise, <c>false</c>.
            </returns>
            <internal><para>6/11/2011: Sky</para></internal>
            <internal>
            Source: http://www.eggheadcafe.com/tutorials/aspnet/cb350027-3869-433d-90c4-d0af320409c7/aspnet-create-a-debug-build-checker-page-for-your-site.aspx    
            </internal>
        </member>
        <member name="M:XAct.AssemblyExtensions.Is64Bit(System.Reflection.Assembly)">
            <summary>
            Determines if the assembly is a 64 bit assembly (at this point, all should really).
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <internal>If you need to know from a command line, consider looking into DUMPBIN command line</internal>
        </member>
        <member name="T:XAct.BitmapExtensions">
            <summary>
            Extensions to Bitmaps
            </summary>
        </member>
        <member name="M:XAct.BitmapExtensions.ConvertToGrayscale(System.Drawing.Bitmap)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Makes the grayscale3.
            </summary>
            <remarks>
            Src: http://www.switchonthecode.com/tutorials/csharp-tutorial-convert-a-color-image-to-grayscale
            </remarks>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.IHasTypeNameExtensions">
            <summary>
            Extensions to entities implementing 
            the 
            <see cref="T:XAct.IHasTypeName"/>
            contract
            </summary>
        </member>
        <member name="M:XAct.IHasTypeNameExtensions.GetTypeFromTypeName(XAct.IHasTypeName)">
            <summary>
            Gets the type from the given type name.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IHasTypeNameExtensions.GetTypeFromTypeName(XAct.IHasAssemblyAndTypeAndMethodNames)">
            <summary>
            Gets the type from the given type name.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.DateTimeFFExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.DateTimeFFExtensions.ToInt(System.DateTime)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Convert Date to Integer format.
            </summary>
            <param name = "dateTime">DateTime to convert.</param>
            <returns>Integer representation fo Date.</returns>
            <remarks>
              <para>
                The Integer will represent days since 30 december 1899 at midnight.
              </para>
            </remarks>
        </member>
        <member name="M:XAct.DateTimeFFExtensions.ToDouble(System.DateTime)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Convert DateTime to Double format.
            </summary>
            <param name = "dateTime">DateTime to convert</param>
            <returns>Double representation of Date.</returns>
            <remarks>
              The Integer will represent days since 30 december 1899 at midnight, the float, the number of ticks.
            </remarks>
        </member>
        <member name="M:XAct.DateTimeFFExtensions.AddInterval(System.DateTime,XAct.TimeInterval,System.Int32)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Adds the specified interval amount (interval amount can be negative as well).
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="timeInterval">The time interval.</param>
            <param name="amount">The amount.</param>
            <returns></returns>
            <internal><para>6/8/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.DirectoryInfoExtensions">
            <summary>
            Extensions to the DirectoryInfo object
            </summary>
        </member>
        <member name="M:XAct.DirectoryInfoExtensions.SetDateTime(System.IO.DirectoryInfo,XAct.Enums.AuditableEvent,System.DateTime)">
            <summary>
            Sets the directory's dates.
            </summary>
            <param name="directoryInfo">The directory information.</param>
            <param name="type">The type.</param>
            <param name="dateTimeUtc">The date time UTC.</param>
            <exception cref="T:System.NotSupportedException">Only Type=Created, Accessed, Modified are supported.</exception>
        </member>
        <member name="M:XAct.DirectoryInfoExtensions.ExistsOrCreate(System.IO.DirectoryInfo)">
            <summary>
            Ensures Directory exists before use.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.DirectoryInfoExtensions.TryFindParentFile(System.IO.DirectoryInfo,System.String,System.IO.FileInfo@)">
            <summary>
            Tries the find parent file.
            <para>
            An example use case would be when given a path to a folder containing a *.cs file, and trying to find
            the parent *.csproj file.
            </para>
            </summary>
            <param name="directoryInfo">The directory information.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="resultFileInfo">The result file information.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.EditableValueExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.EditableValue`1"/>
            </summary>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValueExtensions.GetValue``1(XAct.EditableValue{``0})">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the typed value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.EditableValueExtensions.SetValue``1(XAct.EditableValue{``0},``0)">
            <summary>
            Sets the typed value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="editableValue">The editable value.</param>
            <param name="value">The value.</param>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="T:XAct.ExceptionExtensions">
            <summary>
            Extension methods to the <see cref="T:System.Exception"/>
            object.
            </summary>
        </member>
        <member name="M:XAct.ExceptionExtensions.Trace(System.Exception,XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Trace the Exception to the <see cref="T:XAct.Diagnostics.ITracingService"/> implementation.
            </summary>
            <param name="e">The e.</param>
            <param name="traceLevel">The trace level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:XAct.ExceptionExtensions.ToLogString(System.Exception,System.String)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            <para>Creates a log-string from the Exception.</para>
            <para>The result includes the stacktrace, innerexception et cetera, separated by <seealso cref="P:System.Environment.NewLine"/>.</para>
            </summary>
            <param name="ex">The exception to create the string from.</param>
            <param name="additionalMessage">Additional message to place at the top of the string, maybe be empty or null.</param>
            <returns></returns>
            <internal>
            Src: http://bit.ly/eoOpqq 
            </internal>
        </member>
        <member name="T:XAct.FileInfoExtensions">
            <summary>
            Extensions to the <see cref="T:System.IO.FileInfo"/> class
            </summary>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.FileInfoExtensions.IsPathAbsolute(System.IO.FileInfo)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Ensures paths are absolute or not
            </summary>
            <remarks>
            <para>
            If the path starts with "D:\" or "\\" or "d:/" or "//", it's absolute
            </para>
            </remarks>
            <param name = "fileInfo"></param>
        </member>
        <member name="M:XAct.FileInfoExtensions.IsDirectorySeparatorChar(System.Char,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Returns true if the given char is '\', and/or '/' character.
            </summary>
            <param name = "sepChar">The char to test.</param>
            <param name = "eitherDirection">Flag to test for forward slash as well.</param>
            <returns>True if char is '\\' and if eitherDirection flag is set, '/'.</returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.RelativeTo(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Returns the part of the fileInfo's path, relative to the given directory.
            <para>
            An example would be:
            <code>
            <![CDATA[
             new FileInfo("c:\\A\\b\\c\\d\\e.txt").RelativeTo(new DirectoryInfo("c:\\a\\b\\c\\"),false);
             //returns:
             "\\d\\e.txt" (note the leading slash).
            ]]>
            </code>
            </para>
            </summary>
            <param name="fileInfo">The file info.</param>
            <param name="directoryInfo">The directory info.</param>
            <param name="throwExceptionIfNotCorrelation">if set to <c>true</c> [throw exception if not correlation].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.SetCreateTime(System.IO.FileInfo,System.DateTime)">
            <summary>
            Sets the create time (UTC).
            </summary>
            <param name="fileInfo">The file system info.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:XAct.FileInfoExtensions.SetLastWriteTime(System.IO.FileInfo,System.DateTime)">
            <summary>
            Sets the last write time (UTC).
            </summary>
            <param name="fileInfo">The file system info.</param>
            <param name="lastWriteTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:XAct.FileInfoExtensions.SetLastAccessTime(System.IO.FileInfo,System.DateTime)">
            <summary>
            Sets the last access time (UTC).
            </summary>
            <param name="fileInfo">The file system info.</param>
            <param name="lastAccessTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:XAct.FileInfoExtensions.GetFileAge(System.IO.FileInfo,System.Nullable{System.DateTime},XAct.IO.FileDateType)">
            <summary>
            Gets the age of the file.
            <para>
            Default is to use <c>LastWriteTimeUtc</c>
            as <c>LastCreateTimeUtc</c> can get sticky, and cached.
            </para>
            </summary>
            <param name="fileInfo">The file info.</param>
            <param name="fileDateType">Type of the file date.</param>
            <param name="nowUtc">The now UTC.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.GetDateFromFileInfo(System.IO.FileInfo,XAct.IO.FileDateType,System.Boolean)">
            <summary>
            Gets the date from file info.
            <para>
            Default is to use <c>LastWriteTimeUtc</c>
            as <c>LastCreateTimeUtc</c> can get sticky, and cached.
            </para>
            </summary>
            <param name="fileInfo">The file info.</param>
            <param name="fileDateType">Type of the file date.</param>
            <param name="forceRefresh">if set to <c>true</c> force refresh of dates, to get around stale dates being handed back.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.SuffixFileName(System.IO.FileInfo,System.String)">
            <summary>
            Prefixes the name of the file with something.
            <para>
            Give <c>'C:\SomeDir\SomeFile.txt' and '_20121001'</c>
            returns
            <c>'C:\SomeDir\SomeFile_20121001.txt' </c>
            </para>
            </summary>
            <param name="filePath">The file path.</param>
            <param name="fileNameSuffix">The file name prefix.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.PrefixFileName(System.IO.FileInfo,System.String)">
            <summary>
            Prefixes the name of the file.
            <para>
            Give <c>'C:\SomeDir\SomeFile.txt' and '_locked_'</c>
            returns
            <c>'C:\SomeDir\_locked_SomeFile.txt' </c>
            </para>
            </summary>
            <param name="filePath">The file path.</param>
            <param name="fileNamePrefix">The file name prefix.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions.TryFindParentFile(System.IO.FileInfo,System.String,System.IO.FileInfo@)">
            <summary>
            Given a FileInfo, tries to find the specified file in a parent directory.
            <para>
            An example use case would be when given a path to a *.cs file, and trying to find
            the parent *.csproj file.
            </para>
            </summary>
            <param name="fileInfo">The file information.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="resultFileInfo">The result file information.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.FileSystemInfoExtensions">
            <summary>
            Extensions to the <see cref="T:System.IO.FileSystemInfo"/>
            object.
            </summary>
        </member>
        <member name="M:XAct.FileSystemInfoExtensions.IsADirectory(System.IO.FileSystemInfo)">
            <summary>
            Determines whether the file is a directory or not.
            </summary>
            <param name="fileSystemInfo">The file system info.</param>
            <returns>
              <c>true</c> if [is A directory] [the specified file system info]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XAct.FileSystemInfoExtensions.SetCreateTime(System.IO.FileSystemInfo,System.DateTime)">
            <summary>
            Sets the create time (UTC).
            </summary>
            <param name="fileSystemInfo">The file system info.</param>
            <param name="creationTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:XAct.FileSystemInfoExtensions.SetLastWriteTime(System.IO.FileSystemInfo,System.DateTime)">
            <summary>
            Sets the last write time (UTC).
            </summary>
            <param name="fileSystemInfo">The file system info.</param>
            <param name="lastWriteTimeUtc">The creation time UTC.</param>
        </member>
        <member name="M:XAct.FileSystemInfoExtensions.SetLastAccessTime(System.IO.FileSystemInfo,System.DateTime)">
            <summary>
            Sets the last access time (UTC).
            </summary>
            <param name="fileSystemInfo">The file system info.</param>
            <param name="lastAccessTimeUtc">The creation time UTC.</param>
        </member>
        <member name="T:XAct.XTensions.DirectoryInfoExtensions">
            <summary>
            Extensions to <see cref="T:System.IO.DirectoryInfo"/>
            </summary>
        </member>
        <member name="T:XAct.IListExtensionsFF">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.IListExtensionsFF.ToCsv``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Converts the IList the CSV
            <para>
            first line is the names of the Properties in the List Item).
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="includePropertyNamesOnFistLine">if set to <c>true</c> [include property names on fist line].</param>
            <returns></returns>
        </member>
        <member name="T:XAct.ImageExtensions">
            <summary>
            Extension to the <see cref="T:System.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="M:XAct.ImageExtensions.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Converts given Image to Byte Array
            </summary>
            <param name="image">The image.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.IApplicationSettingScopeExtensions">
            <summary>
            Extension methods to entities that 
            implement <see cref="T:XAct.Settings.IApplicationSettingScope"/> 
            (such as <see cref="T:XAct.Settings.Setting"/>)
            </summary>
        </member>
        <member name="M:XAct.IApplicationSettingScopeExtensions.ContextIdentity(XAct.Settings.IApplicationSettingScope)">
            <summary>
            Contexts the identity.
            </summary>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.IsolatedStorageExtensions">
            <summary>
            
            </summary>
            <internal>
            <internal>
              READ THIS ABOUT SAVING SETTINGS:
              http://blogs.msdn.com/rprabhu/articles/433979.aspx
            </internal>
            <internal>
              Introduction to IsolatedStorage:
              http://winfx.msdn.microsoft.com/library/default.asp?url=/library/en-us/dv_fxfund/html/aff939d7-9e49-46f2-a8cd-938d3020e94e.asp
              Creating Files and Directories in IsolatedStorage:
              http://winfx.msdn.microsoft.com/library/default.asp?url=/library/en-us/dv_fxfund/html/9d08328b-9b7b-4753-b20c-e556c312cf91.asp
            </internal>
            </internal>
        </member>
        <member name="M:XAct.IsolatedStorageExtensions.GetApplicationIsolatedStorageFile">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Gets the User in Application Scoped <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.IsolatedStorageExtensions.FileExists(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String@)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Verifies that a file that matches the specified search pattern exists. 
              <para>
                Returns the first filename that matches the given pattern.
              </para>
            </summary>
            <remarks>
              <para>
                returned fileName will be <c>null</c> if not found.
              </para>
            </remarks>
            <param name="isolatedStorageArea">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> store.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="foundFileName">The first found FileName that matches the search pattern.</param>
            <returns>True if a file name is found to match the pattern.</returns>
        </member>
        <member name="M:XAct.IsolatedStorageExtensions.OpenReadStream(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              (OverLoad) Loads an <see cref="T:System.Xml.XmlDocument"/> from the specified <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/>.
            </summary>
            <remarks>
              <para>
                The resulting <c>xmlDocument</c> will be <c>null</c> if no file found.
              </para>
            </remarks>
            <param name="relativeFileNamePath">The relative file name path.</param>
            <param name="isolatedStorageFile">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> within which to look for the <see cref="T:System.Xml.XmlDocument"/>.</param>
            <returns>Returns <c>true</c> if the document was found and parsed correctly.</returns>
        </member>
        <member name="M:XAct.IsolatedStorageExtensions.OpenWriteStream(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Opens the write stream.
            </summary>
            <param name="isolatedStorageFile">The isolated storage file.</param>
            <param name="relativeFileNamePath">The relative file name path.</param>
            <param name="append">if set to <c>true</c> [append].</param>
            <returns></returns>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="M:XAct.IsolatedStorageExtensions.IsDirectorySeparatorChar(System.Char,System.Boolean)">
            <summary>
              Returns true if the given char is '\', and/or '/' character.
            </summary>
            <param name = "sepChar">The char to test.</param>
            <param name = "eitherDirection">Flag to test for forward slash as well.</param>
            <returns>True if char is '\\' and if eitherDirection flag is set, '/'.</returns>
        </member>
        <member name="T:XAct.IsolatedStorageFileStreamExtensions">
            <summary>
            Extensions to the IsolatatedStorageFileStream class.
            </summary>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IsolatedStorageFileStreamExtensions.Load(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Xml.XmlDocument@)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              (OverLoad) Loads an <see cref="T:System.Xml.XmlDocument"/> 
              from the specified <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
            </summary>
            <param name="isolatedStorageFileStream">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</param>
            <param name="xmlDocument">The <see cref="T:System.Xml.XmlDocument"/> to save.</param>
            <returns>Returns <c>true</c> if the document was found and parsed correctly.</returns>
        </member>
        <member name="M:XAct.IsolatedStorageFileStreamExtensions.Save(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Xml.XmlDocument,System.Text.Encoding)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Saves the given <see cref="T:System.Xml.XmlDocument"/> to the given <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
            </summary>
            <param name="isolatedStorageFileStream">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</param>
            <param name="xmlDocument">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns <c>true</c> if the document was saved correctly.
            </returns>
        </member>
        <member name="T:XAct.IXmlSerializableExtensionsFF">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.IXmlSerializableExtensionsFF.ToXmlNode(System.Xml.Serialization.IXmlSerializable)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Serialize the object and return an XmlNode.
            </summary>
            <param name = "objectToSerialize">The object to serialize.</param>
        </member>
        <member name="T:XAct.NameValueCollectionExtensions">
            <summary>
              Extension Methods for
              <see cref="T:System.Collections.Specialized.NameValueCollection"/>s.
            </summary>
            <internal>
              FAQ: Why Extensions? 
              See Tips Folder for a Readme.txt on the subject.
            </internal>
        </member>
        <member name="M:XAct.NameValueCollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Converts the current <see cref="T:System.Collections.Specialized.NameValueCollection"/>
              to a more flexible dictionary.
              <para>
                Note that even though the source collection is string/string collection, 
                the result is string/object dictionary -- not a string/string dictionary.
              </para>
            </summary>
            <param name="thisNameValueCollection">The current collection.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.NameValueCollectionExtensions.InitializeParam``1(System.Collections.Specialized.NameValueCollection,System.String,``0,System.Collections.Specialized.StringDictionary)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Helper method used by the Init sequence of a provider 
              to extract a value from the passed NameValueCollection. 
              Reverts to Default value if no value found.
            </summary>
            <param name = "nameValueCollection">The config.</param>
            <param name = "attributeTag">The attribute tag.</param>
            <param name = "defaultValue">The default value.</param>
            <param name = "sqlKeywords">The SQL key words.</param>
        </member>
        <member name="M:XAct.NameValueCollectionExtensions.PageNumber``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Extracts from the NameValueCollection the Typed version of the Key's value.
            </summary>
            <param name = "formOrQueryStringNameValueCollection">The form or query string name value collection.</param>
            <param name = "key">A QueryString key -- eg 'pageIndex'</param>
            <returns>A typed value.</returns>
        </member>
        <member name="T:XAct.Drawing.ColorType">
            <summary>
            <para>
            An <c>XActLib</c> Enum.
            </para>
            Enumeration of basic Colors (BW,GrayScale,Color)
            </summary>
            <remarks>
            <para>
            Used by <c>XAct.Imaging.Vision.VisionService</c>
            </para>
            </remarks>
        </member>
        <member name="F:XAct.Drawing.ColorType.BW">
            <summary>
            Black and White
            </summary>
        </member>
        <member name="F:XAct.Drawing.ColorType.Grayscale">
            <summary>
            Grayscale Images
            </summary>
        </member>
        <member name="F:XAct.Drawing.ColorType.Color">
            <summary>
            Color Images
            </summary>
        </member>
        <member name="T:XAct.Extensions.ObjectExtensions2">
            <summary>
            Extensions Methods to all <see cref="T:System.Object"/>s.
            </summary>
        </member>
        <member name="M:XAct.Extensions.ObjectExtensions2.ToXmlNode(System.Object)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Serialize the object and return an XmlNode.
            </summary>
            <param name = "objectToSerialize">The object to serialize.</param>
        </member>
        <member name="T:XAct.Extensions.ObjectReflectionExtensions2FF">
            <summary>
            Extension methods to allow reflection on all <see cref="T:System.Object"/>s.
            </summary>
        </member>
        <member name="M:XAct.Extensions.ObjectReflectionExtensions2FF.CloneTheUncloneable``1(``0)">
            <summary>
            Clones the uncloneable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.SerializedApplicationSettingExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.Settings.SerializedApplicationSetting"/>
            </summary>
        </member>
        <member name="M:XAct.SerializedApplicationSettingExtensions.CompositeKey(XAct.Settings.SerializedApplicationSetting)">
            <summary>
            Serializes the ApplicationIdentifier,ZoneOrTierIdentifier,HostIdentifier,UserIdentifier,Key as a string.
            </summary>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.SettingExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.Settings.Setting"/>.
            </summary>
        </member>
        <member name="M:XAct.SettingExtensions.SerializeAsSerializedSetting(XAct.Settings.Setting,XAct.Settings.ApplicationSettings)">
            <summary>
            Serializes the specified <see cref="T:XAct.Settings.Setting"/>
            as a <see cref="T:XAct.Settings.SerializedApplicationSetting"/>
            <para>
            Invoked only when *new* Settings is added to existing
            collection of <see cref="T:XAct.Settings.SerializedApplicationSetting"/>
            </para>
            </summary>
            <param name="setting">The setting.</param>
            <param name="applicationSettings">The owner settings.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.SettingsExtensions">
            <summary>
            Extensions to the <see cref="N:XAct.Settings"/> (Profile) object).
            </summary>
        </member>
        <member name="M:XAct.SettingsExtensions.Load(XAct.Settings.Settings,XAct.Settings.SerializedApplicationSetting[],System.Boolean,System.Boolean,System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean},XAct.Domain.OfflineModelState)">
            <summary>
            Enumerates through an array of <see cref="T:XAct.Settings.SerializedApplicationSetting"/>s
            in order to load up the given <see cref="N:XAct.Settings"/> object
            with <see cref="T:XAct.Settings.SerializedApplicationSetting"/>s.
            <para>
            Used by an implementation of
            IRepositorySettingService.
            </para>
            </summary>
            <param name="settings">The settings.</param>
            <param name="serializedSettings">The serialized settings.</param>
            <param name="serializedSettingsAreOrdered">if set to <c>true</c> [serialized settings are ordered].</param>
            <param name="includeEditingInformation">if set to <c>true</c> [include editing information].</param>
            <param name="isUnlockedCallback">The is unlocked callback.</param>
            <param name="isReadableCallback">The is readable callback.</param>
            <param name="isWritableCallback">The is writable callback.</param>
            <param name="offlineModelState">State of the offline model.</param>
        </member>
        <member name="M:XAct.SettingsExtensions.GetAllSettings(XAct.Settings.Settings)">
            <summary>
            Gets all <see cref="T:XAct.Settings.Setting"/> objects in <see cref="N:XAct.Settings"/> object.
            <para>
            INTERNAL: For now, don't want to make this an extension method and widely known,
            but don't know where to park it. Shitty. I know...
            </para>
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.SettingsExtensions.ClearAllSettings(XAct.Settings.Settings)">
            <summary>
            Clears all settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:XAct.SettingsExtensions.CloneSettings``1(``0)">
            <summary>
            Clones the settings.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.StackFrameExtensions">
            <summary>
            Extensions to the StackFrame object.
            </summary>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.StackFrameExtensions.GetDeclaringType(System.Diagnostics.StackFrame)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the type of the class containing the currently executing Method.
            </summary>
            <param name="stackFrame">The stack frame.</param>
            <returns></returns>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.StackFrameExtensions.GetMethodSignature(System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            Gets a string representation of the method (useful for logging purposes).
            </summary>
            <param name="stackFrame">The stack frame.</param>
            <param name="includeClassName">if set to <c>true</c> [include class name].</param>
            <returns></returns>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.StackTraceExceptions">
            <summary>
            Extension methods for the StackTrace
            </summary>
            <internal><para>7/31/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.StackTraceExceptions.CurrentMethodDeclaringType(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the type of the class containing the method at the specified offset.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="stackTraceFrameOffset">The stack trace frame offset.</param>
            <returns></returns>
            <internal><para>7/31/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.StackTraceExceptions.GetMethodSignature(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Gets the string representation of the method at the specified offset.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="stackTraceFrameOffset">The stack trace frame offset.</param>
            <returns></returns>
            <internal><para>8/10/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.StreamExtensionsFF">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.StreamExtensionsFF.CreateXslCompiledTransform(System.IO.Stream,System.Boolean)">
            <summary>
              <para>
            An XActLib Extension.
            </para>
            Gets a <see cref="T:System.Xml.Xsl.XslCompiledTransform"/>
            for the given stream (of an Xsl file).
            </summary>
            <param name="xslStream">The XSL stream.</param>
            <param name="enabledScript">if set to <c>true</c> [enabled script].</param>
            <returns></returns>
            <value>The compiled.</value>
        </member>
        <member name="T:XAct.StringDictionaryExtensions">
            <summary>
            Extensions to the StringDictionary.
            </summary>
            <internal><para>6/6/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.StringDictionaryExtensions.GetValue``1(System.Collections.Specialized.StringDictionary,System.String,``0)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the Typed value -- or the given default value.
            <para>
            Useful for Xml Attributes.
            </para>
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <internal><para>6/6/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.StringExtensionsFF">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.StringExtensionsFF.Encrypt(System.String,System.String,System.Byte[])">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Encrypts the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
            <internal>
              <para>
            An XActLib Extension.
              </para>
              <para>
            Src: Xero.Common
              </para>
              </internal>
        </member>
        <member name="M:XAct.StringExtensionsFF.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Decrypts the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns></returns>
            <internal>Src: Xero.Common</internal>
        </member>
        <member name="T:XAct.StringGuidExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.StringGuidExtensions.GenerateDeterministicGuid(System.String,System.Guid,System.Int32)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <param name="version">The version number of the UUID to create; this value must be either
            3 (for MD5 hashing) or 5 (for SHA-1 hashing).</param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="F:XAct.StringGuidExtensions.DnsNamespace">
            <summary>
            The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:XAct.StringGuidExtensions.UrlNamespace">
            <summary>
            The namespace for URLs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:XAct.StringGuidExtensions.IsoOidNamespace">
            <summary>
            The namespace for ISO OIDs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="T:XAct.ThreadExtensionsFF">
            <summary>
            Extensions to the <see cref="T:System.Threading.Thread"/> object
            </summary>
        </member>
        <member name="M:XAct.ThreadExtensionsFF.GetTLSObject``1(System.Threading.Thread,System.String)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the TLS object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thread">The thread.</param>
            <param name="slotName">Name of the slot.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.ThreadExtensionsFF.SetTLSObject``1(System.Threading.Thread,System.String,``0)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Sets the TLS object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thread">The thread.</param>
            <param name="slotName">The slot.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="T:XAct.TimerExtensions">
            <summary>
            Extensions to the <see cref="T:System.Timers.Timer"/> object
            </summary>
        </member>
        <member name="M:XAct.TimerExtensions.AddRandonmessToTimerInterval(System.Timers.Timer,System.Int32)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Adds randonmess to timer interval.
            </summary>
            <param name="timer">The timer.</param>
            <param name="pollInterval">The poll interval.</param>
        </member>
        <member name="T:XAct.TraceLevelExtensions">
            <summary>
            Extension Methods to the 
            <see cref="T:System.Diagnostics.TraceLevel"/> Enumeration type.
            </summary>
        </member>
        <member name="M:XAct.TraceLevelExtensions.ToTraceEventType(System.Diagnostics.TraceLevel)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Converts a generic all purpose <see cref="T:System.Diagnostics.TraceLevel"/>
            to the more 
            specific 
            <see cref="T:System.Diagnostics.TraceEventType"/> 
            lthe type of the trace event.
            </summary>
            <param name="traceLevel">The trace level.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.TraceSwitchExtensions">
            <summary>
            Extension Methods to the 
            <see cref="T:System.Diagnostics.TraceSwitch"/>
            class.
            <para>
            Warning: TraceSwitch is not available in CF or Ag Frameworks.
            </para>
            </summary>
        </member>
        <member name="M:XAct.TraceSwitchExtensions.Max(System.Diagnostics.TraceSwitch,System.Diagnostics.TraceSwitch[])">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Returns the max Level of all the TraceSwitches.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            //As Values are Off=0,Error=1,Warning=2,Info=3,Verbose=4: 
            Debug.Assert(TraceSwitch.Verbose.Max(TraceSwitch.Error,TraceSwitch.Information)==TraceSwitch.Verbose)
            ]]>
            </code>
            </para>
            </summary>
            <param name="traceSwitch">The trace switch.</param>
            <param name="traceSwitchs">The trace switchs.</param>
        </member>
        <member name="M:XAct.TraceSwitchExtensions.Min(System.Diagnostics.TraceSwitch,System.Diagnostics.TraceSwitch[])">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Returns the min Level of all the given TraceSwitches.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            //As Values are Off=0,Error=1,Warning=2,Info=3,Verbose=4: 
            Debug.Assert(TraceSwitch.Verbose.Min(TraceSwitch.Error,TraceSwitch.Information)==TraceSwitch.Error)
            ]]>
            </code>
            </para>
            </summary>
            <param name="traceSwitch">The trace switch.</param>
            <param name="traceSwitchs">The trace switchs.</param>
        </member>
        <member name="M:XAct.TraceSwitchExtensions.ShouldTrace(System.Diagnostics.TraceSwitch,System.Diagnostics.TraceLevel)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Determine whether the messageLevel is within the 
            TraceSwitch's Level.
            <para>
            Usage Example:
            <code>
            <![CDATA[
            //As Values are Off=0,Error=1,Warning=2,Info=3,Verbose=4: 
            traceSwitch.Level = TraceLevel.Info;
            //As 2 <= 3 therefore:
            Debug.Assert(traceSwitch.ShouldTrace(TraceLevel.Warning))
            ]]>
            </code>
            </para>
            </summary>
            <param name="traceSwitch">The trace switch.</param>
            <param name="messsageTraceLevel">The messsage trace level.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.XmlExtensions">
            <summary>
              Extensions for Xml entities.
            </summary>
            <internal>
              FAQ: Why Extensions? 
              See Tips Folder for a Readme.txt on the subject.
            </internal>
        </member>
        <member name="M:XAct.XmlExtensions.GetAttributeValue``1(System.Xml.XmlElement,System.String,``0,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the given element's attribute value. If none found,
            can optionally look for a nested tag with the given name.
            <para>
            Note: Returns found string, or null if not found.
            </para>
            </summary>
            <param name="xmlElement">The XmlElement.</param>
            <param name="tag">The Attribute tag.</param>
            <param name="defaultValue">The default value.</param>
            <param name="checkChildTagsAsWell">if set to <c>true</c> look for value within child elements as well.</param>
            <returns>Returns found string, or null.</returns>
        </member>
        <member name="M:XAct.XmlExtensions.SetAttributeValue``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
              Sets the attribute value of a given XmlElement.
              <para>
                Note: If given null, corrects it to String.Empty before saving.
              </para>
            </summary>
            <param name="xmlElement">The XmlElement to be parsed.</param>
            <param name="tag">The Attribute tag.</param>
            <param name="value">The value.</param>
            <returns>The updated existing Attribute, or new one that was created.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is raised if the xmlElement is null.</exception>
            <exception cref="T:System.ArgumentNullException">An exception is raised if the tag is null.</exception>
        </member>
        <member name="M:XAct.XmlExtensions.GetChildElement(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            Gets the child element.
            </summary>
            <param name="xmlElement">The XML element.</param>
            <param name="elementName">Name of the element.</param>
            <param name="createIfNotFound">if set to <c>true</c> [create if not found].</param>
            <returns></returns>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.FF.IO.Entities.FileSystemDirectoryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemDirectoryInfo"/> class.
            </summary>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemDirectoryInfo.#ctor(XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemDirectoryInfo"/> class.
            </summary>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemDirectoryInfo.#ctor(XAct.IO.IFSIOService,XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemDirectoryInfo"/> class.
            </summary>
            <param name="ifsIOService">The ifs io service.</param>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="T:XAct.FF.IO.Entities.FileSystemFileInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemFileInfo"/> class.
            </summary>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemFileInfo.#ctor(XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemFileInfo"/> class.
            </summary>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.FF.IO.Entities.FileSystemFileInfo.#ctor(XAct.IO.IFSIOService,XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.FF.IO.Entities.FileSystemFileInfo"/> class.
            </summary>
            <param name="ifsIOService">The ifs io service.</param>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="T:XAct.FileAccessExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.IO.FileAccess"/>
            enumeration
            </summary>
        </member>
        <member name="M:XAct.FileAccessExtensions.MapTo(XAct.IO.FileAccess)">
            <summary>
            Maps the given portable enum value to a <see cref="T:System.IO.FileAccess"/> enum value.
            </summary>
            <param name="fileAccess">The file access.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:XAct.FileInfoExtensions2">
            <summary>
            Extensions to the FileInfo object
            </summary>
        </member>
        <member name="M:XAct.FileInfoExtensions2.SafeMove(System.IO.FileInfo,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tries to move a file while allowing for failure a couple of times.
            </summary>
            <param name="from">From.</param>
            <param name="toPath">To path.</param>
            <param name="attempts">The attempts.</param>
            <param name="retryMilliseconds">The retry milliseconds.</param>
            <param name="iftargetExistsRenameWithStamp">if set to <c>true</c> [iftarget exists rename with stamp].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.FileInfoExtensions2.RotateToMakeSpace(System.IO.FileInfo,XAct.IO.IIOService)">
            <summary>
            Rotates file names for rolling backup.
            </summary>
            <remarks>
            <para>
            Usage
            </para>
            </remarks>
            <param name="fileInfo">The file info.</param>
            <param name="ioService">The specific (Isolated or HD) service to use to Move/Delete files around.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.FileModeExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.IO.FileMode"/>
            enumeration.
            </summary>
        </member>
        <member name="M:XAct.FileModeExtensions.MapTo(XAct.IO.FileMode)">
            <summary>
            Maps the given portable enum value to a <see cref="T:System.IO.FileMode"/> enum value.
            </summary>
            <param name="fileMode">The file mode.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:XAct.FileShareExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.IO.FileShare"/> enum
            </summary>
        </member>
        <member name="M:XAct.FileShareExtensions.MapTo(XAct.IO.FileShare)">
            <summary>
            Maps the given portable enum value to a <see cref="T:System.IO.FileShare"/> enum value.
            </summary>
            <param name="fileShare">The file share.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:XAct.HierarchicalOperationOptionExtensions">
            <summary>
            Extensions to the <see cref="T:XAct.HierarchicalOperationOption"/>
            enum.
            </summary>
        </member>
        <member name="M:XAct.HierarchicalOperationOptionExtensions.MapTo(XAct.HierarchicalOperationOption)">
            <summary>
            Converts a <see cref="T:XAct.HierarchicalOperationOption"/>
            to a <see cref="T:System.IO.SearchOption"/>
            </summary>
            <param name="hierarchicalOperationOption">The hierarchical operation option.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:XAct.IO.IIsolatedStorageIOService">
            <summary>
            A specialization of the <see cref="T:XAct.IO.IIOService"/> Contract, to work with IsolatedStorage.
            <para>
            This is ultimately a safer ('greener') solution than using FSIOService.
            </para>
            </summary>
        </member>
        <member name="T:XAct.IO.Implementations.FSIOService">
            <summary>
            A File based implementation of <see cref="T:XAct.IO.Implementations.FSIOService"/>
            <para>
            Note that usage of this implementation implies a much higher
            security risk (direct access to HD always does).
            </para>
            <para>
            Consider using an IsolatedStorage implementation of 
            <see cref="T:XAct.IO.IIOService"/> (provided in XAct.IO.dll) instead.
            </para>
            </summary>
            <remarks>
            <para>
            
            </para>
            </remarks>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.IO.IFSIOService">
            <summary>
            A specialization of <see cref="T:XAct.IO.IIOService"/>
            for access to files in the NT FileSystem
            (not IsolatedStorage).
            </summary>
            <remarks>
            Defined in <c>XAct.IO</c> (so that it is available
            to <see cref="T:XAct.IO.IIOService"/> as needed), 
            but implemented in <c>XAct.IO.FS</c>.
            </remarks>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.#ctor(XAct.Diagnostics.ITracingService,XAct.IO.IPathService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.Implementations.FSIOService"/> class.
            </summary>
            <param name="tracingService">The logging service.</param>
            <param name="pathService">The path service.</param>
            <internal>7/17/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileOpenAsync(System.String,XAct.IO.FileMode,XAct.IO.FileAccess,XAct.IO.FileShare)">
            <summary>
            Opens the specified resource with the given settings.
            </summary>
            <param name="fileFullName">The URI.</param>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file share.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileOpenReadAsync(System.String)">
            <summary>
            Opens the read.
            </summary>
            <param name="fileFullName">The path.</param>
            <returns></returns>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileOpenWriteAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the write.
            </summary>
            <param name="fileFullName">The path.</param>
            <param name="replaceAnyIfFound">if set to <c>true</c> replace any if file already exists.</param>
            <param name="append">if set to <c>true</c> opens the stream for appending.</param>
            <returns></returns>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileOpenTextAsync(System.String)">
            <summary>
            Opens an existing UTF-8 text for reading.
            </summary>
            <param name="fileFullName">The path.</param>
            <returns></returns>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileReplaceAsync(System.String,System.String,System.String)">
            <summary>
            Replaces the specified source file name.
            </summary>
            <param name="sourceFileFullName">Name of the source file.</param>
            <param name="destinationFileFullName">Name of the destination file.</param>
            <param name="destinationBackupFileName">Name of the destination backup file.</param>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileCreateAsync(System.String)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="sourceFileFullName">Full name of the source file.</param>
            <returns></returns>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileDeleteAsync(System.String)">
            <summary>
            Deletes the specified path.
            </summary>
            <param name="fileFullName">The path.</param>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileExistsAsync(System.String)">
            <summary>
            Existses the specified path.
            </summary>
            <param name="fileFullName">The path.</param>
            <returns></returns>
            <internal><para>5/8/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileMoveAsync(System.String,System.String,System.Boolean)">
            <summary>
            Moves the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <param name="overWriteAllowed">if set to <c>true</c> [over write allowed].</param>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileAppendAllTextAsync(System.String,System.String)">
            <summary>
            Appends all text.
            </summary>
            <param name="fileFullName">The path.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileCopyAsync(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source file name.
            </summary>
            <param name="sourceFileFullName">Name of the source file.</param>
            <param name="destinationFileFullName">Name of the destination file.</param>
            <param name="overWriteAllowed">if set to <c>true</c> [over write allowed].</param>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.GetDirectoryFileNamesAsync(System.String,System.String,XAct.HierarchicalOperationOption)">
            <summary>
            A wrapping of Directory.GetFiles 
            <para>
            At present, don't think this deserves its own service. We'll see.
            </para>
            </summary>
            <param name="directoryFullName">Name of the directory.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectoryCreateAsync(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryFullName">The directory path.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectoryExistsAsync(System.String,System.Boolean)">
            <summary>
            Determines if the directory exists.
            </summary>
            <param name="directoryFullName">The directory path.</param>
            <param name="createIfMissing">if set to <c>true</c> [create if missing].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectoryDeleteAsync(System.String)">
            <summary>
            Determines.
            </summary>
            <param name="directoryFullName">The directory path.</param>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectoryGetDateTimeAsync(System.String,XAct.Enums.AuditableEvent)">
            <summary>
            Directories the get date time asynchronous.
            </summary>
            <param name="directoryFullName">Full name of the directory.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectorySetDateTimeAsync(System.String,XAct.Enums.AuditableEvent,System.DateTime)">
            <summary>
            Sets the directory's auditing dates.
            </summary>
            <param name="directoryFullName">The directory information.</param>
            <param name="type">The type.</param>
            <param name="dateTimeUtc">The date time UTC.</param>
            <exception cref="T:System.NotSupportedException">Only Type=Created, Accessed, Modified are supported.</exception>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileGetSizeAsync(System.String)">
            <summary>
            Gets the files's size.
            </summary>
            <param name="fileFullName">Full name of the directory.</param>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileGetDateTimeAsync(System.String,XAct.Enums.AuditableEvent)">
            <summary>
            Gets the directory's auditing dates.
            </summary>
            <param name="directoryFullName">Full name of the file.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.NotSupportedException">Only Type=Created, Accessed, Modified are supported.</exception>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileSetDateTimeAsync(System.String,XAct.Enums.AuditableEvent,System.DateTime)">
            <summary>
            Sets the directory's auditing dates.
            </summary>
            <param name="fileFullName">Full name of the file.</param>
            <param name="type">The type.</param>
            <param name="dateTimeUtc">The date time UTC.</param>
            <exception cref="T:System.NotSupportedException">Only Type=Created, Accessed, Modified are supported.</exception>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.GetFileInfoAsync(System.String)">
            <summary>
            Gets the file information.
            </summary>
            <param name="fileFullName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.FileCheckAccessibilityAsync(System.String,XAct.IO.FileAccess,XAct.IO.FileShare)">
            <summary>
            Determines whether file is available (not locked or non-existent).
            </summary>
            <param name="fileFullName">Full name of the file.</param>
            <param name="desiredFileAccess">The desired file access.</param>
            <param name="desiredFileShare">The desired file share.</param>
            <returns>
              <c>true</c> if [is file unavailable] [the specified file]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XAct.IO.Implementations.FSIOService.DirectoryCheckAccessibilityAsync(System.String,System.Boolean)">
            <summary>
            Checks whether the directory is accessible.
            </summary>
            <param name="directoryFullName">Full name of the directory.</param>
            <param name="tryForceCreateDirectory">if set to <c>true</c> [try force create directory].</param>
        </member>
        <member name="P:XAct.IO.Implementations.FSIOService.DirectoryAccessTestFileName">
            <summary>
            Gets the name of the Directory Accessibility test file.
            </summary>
            <value>
            The name of the access test file.
            </value>
        </member>
        <member name="T:XAct.IO.FileSystemUserFileSystemService">
            <summary>
            An implementation of the 
            <see cref="T:XAct.IO.IFileSystemUserFileSystemService"/>
            Contract for a service to return 
            entry points to the current 
            <see cref="T:System.Security.Principal.IIdentity"/>'s WellKnown 
            file system locations (Local, Roaming, Temp).
            <para>
            Very rarely relevant to Server based development.
            </para>
            </summary>
        </member>
        <member name="T:XAct.IO.IFileSystemUserFileSystemService">
            <summary>
            An specialization of the 
            <see cref="T:XAct.IO.IUserFileSystemService"/>
            Contract for a service to return 
            entry points to the current 
            <see cref="T:System.Security.Principal.IIdentity"/>'s WellKnown 
            file system locations (Local, Roaming, Temp).
            <para>
            Very rarely relevant to Server based development.
            </para>
            </summary>
        </member>
        <member name="M:XAct.IO.FileSystemUserFileSystemService.#ctor(XAct.Diagnostics.ITracingService,XAct.IO.IPathService,XAct.IO.IFSIOService,XAct.Environment.IProductInformationService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.FileSystemUserFileSystemService"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="pathService">The path service.</param>
            <param name="fsIOService">The fs io service.</param>
            <param name="productInformationService">The product information service.</param>
        </member>
        <member name="P:XAct.IO.FileSystemUserFileSystemService.UserLocal">
            <summary>
            The application identity's local folder
            associated to this application,
            on this device only .
            <para>
            Contents are not synchronized with other devices.
            </para>
            <para>
            Note that the application identity is the app user on mobile,
            service account in a web application)
            </para>
            </summary>
        </member>
        <member name="P:XAct.IO.FileSystemUserFileSystemService.UserRoaming">
            <summary>
            The current identity's roaming folder,
            which is synchronized across devices.
            <para>
            Note that the application identity is the app user on mobile,
            service account in a web application)
            </para>
            </summary>
        </member>
        <member name="P:XAct.IO.FileSystemUserFileSystemService.UserTemp">
            <summary>
            The current identity's temp folder
            <para>
            Potentially cleared
            every time the application is run).
            </para>
            </summary>
        </member>
        <member name="P:XAct.IO.FileSystemUserFileSystemService.CommonLocal">
            <summary>
            The common (shared by all users of this application on this device) local folder,
            associated to this application, on this device only.
            <para>
            Contents are not synchronized with other devices.
            </para>
            <para>
            Note that the application identity is the app user on mobile,
            service account in a web application)
            </para>
            <para>
            Note that there is no concept of CommonRoaming.
            </para>
            </summary>
        </member>
        <member name="P:XAct.IO.FileSystemUserFileSystemService.ApplicationRoot">
            <summary>
            The application's root folder.
            <para>
            Not available under all platforms (use
            <see cref="P:XAct.IO.FileSystemUserFileSystemService.UserRoaming"/>
            or
            <see cref="P:XAct.IO.FileSystemUserFileSystemService.UserLocal"/>
            for user files.
            </para>
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:XAct.IO.IIsolatedStorageUserFileSystemService">
            <summary>
            An <see cref="T:XAct.IO.IIsolatedStorageIOService"/>
            based specialization of the 
            <see cref="T:XAct.IO.IUserFileSystemService"/>
            contract.
            </summary>
        </member>
        <member name="T:XAct.IO.IsolatedStorageFileInfo">
            <summary>
            An <see cref="T:XAct.IO.IIsolatedStorageIOService"/>
            specific specialization of 
            <see cref="T:XAct.IO.FileInfoBase`2"/>
            </summary>
        </member>
        <member name="M:XAct.IO.IsolatedStorageFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageFileInfo"/> class.
            </summary>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.IO.IsolatedStorageFileInfo.#ctor(XAct.IO.IIOService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageFileInfo"/> class.
            </summary>
            <param name="managingIOService">The managing io service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.IO.IsolatedStorageFileInfo.#ctor(XAct.IO.IIOService,XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageFileInfo"/> class.
            </summary>
            <param name="managingIOService">The managing io service.</param>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="T:XAct.IO.IsolatedStorageDirectoryInfo">
            <summary>
            An <see cref="T:XAct.IO.IIsolatedStorageIOService"/>
            specific specialization of 
            <see cref="T:XAct.IO.DirectoryInfoBase`2"/>
            </summary>
        </member>
        <member name="M:XAct.IO.IsolatedStorageDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageDirectoryInfo"/> class.
            </summary>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.IO.IsolatedStorageDirectoryInfo.#ctor(XAct.IO.IIOService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageDirectoryInfo"/> class.
            </summary>
            <param name="managingIOService">The managing io service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="M:XAct.IO.IsolatedStorageDirectoryInfo.#ctor(XAct.IO.IIOService,XAct.IO.IPathService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.IsolatedStorageDirectoryInfo"/> class.
            </summary>
            <param name="managingIOService">The managing io service.</param>
            <param name="pathService">The path service.</param>
            <param name="fullName">The full name.</param>
        </member>
        <member name="T:XAct.IO.Implementations.IsolatedStorageIOService">
            <summary>
            A default implementation of <see cref="T:XAct.IO.IIsolatedStorageIOService"/>
            providing a Service that reads and writes from IsolatedStorage.
            <para>
            As reading and writting from IsolatedStorage requires less
            rights, and is more portable (ie ClickOnce, etc.), it is always 
            preferable to investigate using this service, before using
            <c>FSIOService</c>
            </para>
            </summary>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.#ctor(XAct.Diagnostics.ITracingService,XAct.IO.IPathService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.IO.Implementations.IsolatedStorageIOService"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="pathService">The path service.</param>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileOpenAsync(System.String,XAct.IO.FileMode,XAct.IO.FileAccess,XAct.IO.FileShare)">
            <summary>
            Opens the specified resource with the given settings.
            </summary>
            <param name="uri">The URI.</param>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file share.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileOpenReadAsync(System.String)">
            <summary>
            Opens the named resource and returns a readonly stream.
            <para>
            Usage:
            <code>
            <![CDATA[
            IIsolatedStorageIOService isolatedStorageIOService =
              DependencyResolver.Current.GetInstance<IIsolatedStorageIOService>();
            
              using (Stream stream = isolatedStorageIOService.OpenRead("/UserSettings/UI.config")){
                ...
              }
            ]]>
            </code>
            </para>
            </summary>
            <param name="uri">The full uri to the resource.</param>
            <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileOpenWriteAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens the named resource and returns a write only stream.
            <para>
            Usage:
            <code>
            			<![CDATA[
            IIsolatedStorageIOService isolatedStorageIOService =
            DependencyResolver.Current.GetInstance<IIsolatedStorageIOService>();
            using (Stream stream = isolatedStorageIOService.OpenWrite("/UserSettings/UI.config")){
            ...
            }
            ]]>
            		</code>
            	</para>
            </summary>
            <param name="uri">The uri.</param>
            <param name="replaceAnyIfFound">if set to <c>true</c> replace any if file already exists.</param>
            <param name="append">if set to <c>true</c> opens the stream for appending.</param>
            <returns>
            An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/>
            </returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileOpenTextAsync(System.String)">
            <summary>
            Opens the named resource and returns a <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="uri">The uri.</param>
            <returns>
            A <see cref="T:System.IO.StreamReader"/>.
            </returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileReplaceAsync(System.String,System.String,System.String)">
            <summary>
            Replaces the destination, with the source,
            after moving the destination to a Backup position.
            </summary>
            <param name="sourceUri">Name of the source file.</param>
            <param name="destinationUri">Name of the destination file.</param>
            <param name="destinationBackupUri">Name of the destination backup file.</param>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileCopyAsync(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source resource to the target URI.
            </summary>
            <param name="sourceUri">The source URI.</param>
            <param name="destinationUri">The destination URI.</param>
            <param name="overwriteAllowed">if set to <c>true</c> [overwrite] any existing file.</param>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileCreateAsync(System.String)">
            <summary>
            Creates a new resource at the specified location, returning a stream.
            </summary>
            <param name="uri">The uri.</param>
            <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream"/></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileDeleteAsync(System.String)">
            <summary>
            Deletes the specified target file.
            <para>
            Example of usage would be
            <code>
            <![CDATA[
            IIsolatedStorageIOService isolatedStorageIOService =
              DependencyResolver.Current.GetInstance<IIsolatedStorageIOService>();
            
            isolatedStorageIOService.Delete("/UserSettings/UI.config");
            ]]>
            </code>
            </para>
            </summary>
            <param name="uri">The URI.</param>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileExistsAsync(System.String)">
            <summary>
            Determines if the specified resource exists.
            <para>
            Usage:
            <code>
            <![CDATA[
            IIsolatedStorageIOService isolatedStorageIOService =
              DependencyResolver.Current.GetInstance<IIsolatedStorageIOService>();
            
            isolatedStorageIOService.Exists("/UserSettings/UI.config");
            ]]>
            </code>
            </para>
            <para>
            See: http://stackoverflow.com/a/5208545
            </para>
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileGetSizeAsync(System.String)">
            <summary>
            Gets the files's size.
            </summary>
            <param name="fileFullName">Full name of the directory.</param>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileMoveAsync(System.String,System.String,System.Boolean)">
            <summary>
            Moves the specified resource.
            <para>
            Usage:
            <code>
            			<![CDATA[
            IIsolatedStorageIOService isolatedStorageIOService =
            DependencyResolver.Current.GetInstance<IIsolatedStorageIOService>();
            isolatedStorageIOService.Move("/UserSettings/UI.config","/CommonSettings/UI.config");
            ]]>
            		</code>
            	</para>
            </summary>
            <param name="sourceUri">Name of the source file.</param>
            <param name="destinationUri">Name of the destination file.</param>
            <param name="overWriteAllowed">if set to <c>true</c> [over write allowed].</param>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileAppendAllTextAsync(System.String,System.String)">
            <summary>
            Appends the given string to the specified resource.
            </summary>
            <param name="uri">The URI.</param>
            <param name="contents">The contents.</param>
            <internal>5/8/2011: Sky</internal>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.GetDirectoryFileNamesAsync(System.String,System.String,XAct.HierarchicalOperationOption)">
            <summary>
            Get's the filenames of the files in the directory.
            <para>
            At present, don't think this deserves its own service. We'll see.
            </para>
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.GetDirectoryFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            A wrapping of Directory.GetFiles 
            <para>
            At present, don't think this deserves its own service. We'll see.
            </para>
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryCreateAsync(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryExistsAsync(System.String,System.Boolean)">
            <summary>
            Determines if the directory exists.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="createIfMissing">if set to <c>true</c> [create if missing].</param>
            <returns></returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryDeleteAsync(System.String)">
            <summary>
            Directories the delete.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileGetDateTimeAsync(System.String,XAct.Enums.AuditableEvent)">
            <summary>
            Gets the files's dates.
            </summary>
            <param name="fileFullName">Full name of the directory.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.IsDirectorySeparatorChar(System.Char,System.Boolean)">
            <summary>
              Returns true if the given char is '\', and/or '/' character.
            </summary>
            <param name = "sepChar">The char to test.</param>
            <param name = "eitherDirection">Flag to test for forward slash as well.</param>
            <returns>True if char is '\\' and if eitherDirection flag is set, '/'.</returns>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.GetFileInfoAsync(System.String)">
            <summary>
            Gets the portable information about the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileSetDateTimeAsync(System.String,XAct.Enums.AuditableEvent,System.DateTime)">
            <summary>
            Sets the directory's dates.
            </summary>
            <param name="fileFullName">Full name of the directory.</param>
            <param name="type">The type.</param>
            <param name="dateTimeUtc">The date time UTC.</param>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryGetDateTimeAsync(System.String,XAct.Enums.AuditableEvent)">
            <summary>
            Gets the directory's dates.
            </summary>
            <param name="directoryFullName">Full name of the directory.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectorySetDateTimeAsync(System.String,XAct.Enums.AuditableEvent,System.DateTime)">
            <summary>
            Sets the directory's dates.
            </summary>
            <param name="directoryFullName">Full name of the directory.</param>
            <param name="type">The type.</param>
            <param name="dateTimeUtc">The date time UTC.</param>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.FileCheckAccessibilityAsync(System.String,XAct.IO.FileAccess,XAct.IO.FileShare)">
            <summary>
            Checks the file accessibility.
            </summary>
            <param name="fileFullName">Full name of the file.</param>
            <param name="desiredFileAccess">The desired file access.</param>
            <param name="desiredFileShare">The desired file share.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryCheckAccessibilityAsync(System.String,System.Boolean)">
            <summary>
            Checks the directory's accessibility.
            </summary>
            <param name="directoryFileName">The directory information.</param>
            <param name="tryForceCreateDirectory">if set to <c>true</c> [try force create directory].</param>
        </member>
        <member name="P:XAct.IO.Implementations.IsolatedStorageIOService.DirectoryAccessTestFileName">
            <summary>
            Gets the name of the Directory Accessibility test file.
            </summary>
            <value>
            The name of the access test file.
            </value>
        </member>
        <member name="T:XAct.Security.Permissions.PermissionSetExtensions">
            <summary>
            Extension methods to the <see cref="T:System.Security.PermissionSet"/>
            object
            </summary>
        </member>
        <member name="M:XAct.Security.Permissions.PermissionSetExtensions.IsPermitted(System.Security.PermissionSet,System.Security.IPermission)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            <para>
            An extension method to check whether the user
            has the required permission.
            </para>
            <para>
            Usage Example:
            <code>
            <![CDATA[
            var requestedPermission = new FileIOPermission(FileIOPermissionAccess.Write,folder);
            
            if (AppDomain.CurrentDomain.PermissionSet.IsPermitted(requestedPermission))
            {
            //go ahead...
            }else{
              //...hum...
            }
            ]]>
            </code>
            </para>
            </summary>
            <param name="permissionSet"></param>
            <param name="requestedPermission"></param>
        </member>
        <member name="M:XAct.Security.Permissions.PermissionSetExtensions.IsPermitted(System.Security.PermissionSet,System.Security.PermissionSet)">
            <summary>
            <para>
            An XActLib Extension.
            </para>
            <para>
            Usage Example:
            <code>
            <![CDATA[
            var requestedPermission = new FileIOPermission(FileIOPermissionAccess.Write,folder);
            var requestedPermissionSet = new RequestedPermissionSet(PermissionState.None);
            requestedPermissionSet.AddPermission(requestedPermissionSet);
            
            if (AppDomain.CurrentDomain.PermissionSet.IsPermitted(requestedPermissionSet))
            {
            //go ahead...
            }else{
              //...hum...
            }
            ]]>
            </code>
            </para>
            </summary>
            <param name="permissionSet">The permission set.</param>
            <param name="requestedPermissionSet">The requested permission set.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.Security.Cryptography.SymmetricAlgorithms">
            <summary>
              Instantiable class for managing encryption 
              and decryption using Symmetric Algorithms.
            </summary>
            <remarks>
              <para>
                See also: 
                http://www.codeproject.com/KB/security/Cryptor.aspx
                and
                http://www.codeproject.com/KB/security/SymmetricAlgorithmHelper.aspx
                Definately read:
                http://www.grimes.demon.co.uk/workshops/secWSEleven.htm
                and
                <![CDATA[
            http://books.google.com/books
            ?id=IqvXsWfzN8wC&pg=PA82&lpg=PA82&dq=symmetricalgorithm+padding&
            source=bl&ots=XeRYx2zAp0&sig=EFD6ekEYF9cHydS4veGwJ5T-JZc&hl=en&sa=X&
            oi=book_result&resnum=6&ct=result#PPR6,M1
            ]]>
              </para>
            </remarks>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms.DefaultSymmetricalAlgorithm">
            <summary>
              Default Symmetric Algorithm to create if no name is supplied.
              <para>
                Default value is "Rijndael".
              </para>
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms.MaxChunkSize">
            <summary>
              The size of the chunk (in KBytes) to read from the incoming stream,
              when processing an encryption.
            </summary>
            <remarks>
              <para>
                Note that 50* 1Kb = 50*1024=51200
              </para>
            </remarks>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms.ChunkSize">
            <summary>
              Represents 1 KByte of data. Vary only for testing purposes.
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._algorithmName">
            <summary>
              Name of the Symmetric Algorithm to use.
              <para>
                If none given in constructor, this will be set to the value
                of <see cref="F:XAct.Security.Cryptography.SymmetricAlgorithms.DefaultSymmetricalAlgorithm"/>.
              </para>
              <para>
                The property is read only.
              </para>
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._embedIVAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether Initialization Vector (IV) buffer 
              is embedded at head of stream, before cipher text.
              <para>
                Note that the default value is <c>True</c>.
              </para>
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._embedKeyAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether obfuscated Key buffer is embedded 
              at head of stream, before cipher text.
              <para>
                The default value is <c>False</c>.
              </para>
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._embedSaltAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether Salt buffer is embedded 
              at head of stream, before cipher text.
              <para>
                The default value is <c>False</c>.
              </para>
            </summary>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._keyPhrase">
            <summary>
              The string Key used to set up the Key Bytes.
            </summary>
            <internal>
              Architecturally, this stinks. 
              At the very least, it should be a SecureString -- but they're such a 
              pain to work with that I havn't implemented it here...maybe one day.
            </internal>
        </member>
        <member name="F:XAct.Security.Cryptography.SymmetricAlgorithms._saltBytes">
            <summary>
              Protected: Bytes used as Salt for converting the KeyPhrase 
              into a Key byte buffer (<see cref="P:XAct.Security.Cryptography.SymmetricAlgorithms.KeyBytes"/>).
              <para>
                If none supplied, the IV byte buffer will be used.
              </para>
            </summary>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.SetLoggingService(XAct.Diagnostics.ITracingService)">
            <summary>
              Sets the loggging service .
            </summary>
            <value>The loggging service.</value>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.#ctor">
            <summary>
              Initializes a new instance of 
              the <see cref="T:XAct.Security.Cryptography.SymmetricAlgorithms"/> class.
            </summary>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.#ctor(System.String)">
            <summary>
              Initializes a new instance of 
              the <see cref="T:XAct.Security.Cryptography.SymmetricAlgorithms"/> class.
              <para>
                Valid algorithm names are: "DES","TripleDES","RC2","Rijndael".
              </para>
            </summary>
            <param name="algorithmName">
              Name of the symmetric algorithm to use.
            </param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.#ctor(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
              Initializes a new instance of 
              the <see cref="T:XAct.Security.Cryptography.SymmetricAlgorithms"/> class.
              <para>
                Valid algorithm names are: "DES","TripleDES","RC2","Rijndael".
              </para>
            </summary>
            <param name="algorithmName">
              Name of the symmetric algorithm to use.
            </param>
            <param name="cipherMode">The cipher mode to use.</param>
            <param name="paddingMode">The padding mode to use.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.#ctor(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of 
              the <see cref="T:XAct.Security.Cryptography.SymmetricAlgorithms"/> class.
              <para>
                Valid algorithm names are: "DES","TripleDES","RC2","Rijndael".
              </para>
            </summary>
            <param name="algorithmName">
              Name of the symmetric algorithm to use.
            </param>
            <param name="cipherMode">The cipher mode to use.</param>
            <param name="paddingMode">The padding mode to use.</param>
            <param name="embedIVAtHeadOfOutgoingStream">
              if set to <c>true</c>, embed the IV bytes at head of outgoing stream.
            </param>
            <param name="embedSaltAtHeadOfOutgoingStream">
              if set to <c>true</c> embed salt bytes at head of outgoing stream.
            </param>
            <param name="embedKeyAtHeadOfOutgoingStream">
              if set to <c>true</c> embed key bytes at head of outgoing stream.
            </param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Encrypt(System.IO.Stream,System.IO.Stream,System.Security.Cryptography.ICryptoTransform)">
            <summary>
              Static method to encrypt the contents of the incoming stream, 
              writting it out to the outgoing stream.
            </summary>
            <remarks>
              <para>
                Invoked by <see cref="M:XAct.Security.Cryptography.SymmetricAlgorithms.Encrypt(System.IO.Stream,System.IO.Stream)"/>.
              </para>
            </remarks>
            <param name="plainTextStream">The stream in.</param>
            <param name="cipherTextStream">The stream out.</param>
            <param name="cryptoTransform">The crypto transform.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Decrypt(System.IO.Stream,System.IO.Stream,System.Security.Cryptography.ICryptoTransform)">
            <summary>
              Static method to decrypt the contents of the incoming cipherText stream, 
              writting it out to the outgoing plainText stream.
            </summary>
            <remarks>
              <para>
                Invoked by <see cref="M:XAct.Security.Cryptography.SymmetricAlgorithms.Decrypt(System.IO.Stream,System.IO.Stream)"/>.
              </para>
            </remarks>
            <param name="cipherTextStream">The stream in.</param>
            <param name="plainTextStream">The stream out.</param>
            <param name="cryptoTransform">The crypto transform.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Initialize(System.String)">
            <summary>
              Initializes the specified key phrase.
              <para>
                A valid <paramref name="keyPhrase"/> must be provided.
              </para>
            </summary>
            <param name="keyPhrase">
              The key phrase. Cannot be null or empty.
            </param>
            <exception cref="T:System.ArgumentNullException">
              An exception is raised if keyPhrase is null or empty.
            </exception>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Initialize(System.String,System.Byte[],System.Byte[])">
            <summary>
              Instantiates and Initializes the Symmetric Algorithm.
              <para>
                A valid <paramref name="keyPhrase"/> must be provided.
              </para>
              <para>
                <paramref name="ivBytes"/> and <paramref name="saltBytes"/> can be null:
                random values will be provided as needed.
              </para>
            </summary>
            <param name="keyPhrase">The key phrase. Cannot be null or empty.</param>
            <param name="ivBytes">The iv bytes. If null, a random IV will be generated.</param>
            <param name="saltBytes">The salt bytes. If null, a Salt (derived from the IV) will be generated.</param>
            <exception cref="T:System.ArgumentNullException">
              An exception is raised if keyPhrase is null or empty.
            </exception>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Initialize(System.Byte[],System.Byte[])">
            <summary>
              Instantiates and Initializes the Symmetric Algorithm.
              <para>
                This override is intended when the KeyBytes have already
                been determined. 
              </para>
              <para>
                <paramref name = "ivBytes" /> and <paramref name = "keyBytes" /> can be null:
                random values will be provided as needed.
              </para>
            </summary>
            <param name = "keyBytes">The key bytes.</param>
            <param name = "ivBytes">The iv bytes. If null, a random IV will be generated.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Encrypt(System.String)">
            <summary>
              Returns an encrypted version (the cipherText) of the given plainText.
            </summary>
            <param name = "plainText">The plain text to encrypt.</param>
            <returns>A string containting the encrypted cipherText.</returns>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Encrypt(System.String,System.String)">
            <summary>
              Encrypts the specified source file, writting the output to the
              output cipherText file.
            </summary>
            <param name = "inputPlainTextFile">The in plain text file.</param>
            <param name = "outputCipherTextFileName">Name of the out cypher text file.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
              Reads the contents of the given plainTextStream, and outputs
              an encrypted version to the given cipherTextStream.
            </summary>
            <param name = "inputPlainTextStream">The plaintext stream in.</param>
            <param name = "outputCipherTextStream">The ciphered stream out.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Decrypt(System.String)">
            <summary>
              Returns the decrypted plainText from the given cipherText.
            </summary>
            <param name = "cipherText">The encrypted cipherText.</param>
            <returns>A string containing the decrypted plainText.</returns>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Decrypt(System.String,System.String)">
            <summary>
              Encrypts the specified source file, writting the output to the
              output cipherText file.
            </summary>
            <param name = "inputCipherTextFile">The in plain text file.</param>
            <param name = "outputPlainTextFileName">Name of the out cypher text file.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
              Reads the contents of the given cipherTextStream, and outputs
              the decrypted version to the given plainTextStream.
            </summary>
            <param name = "inputCipherTextStream">The stream in.</param>
            <param name = "outputPlainTextStream">The stream out.</param>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.InitializeAlgorithm(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
              Initializes the internal <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> 
              with the Initialization vector (IV) and key string or byte buffer as specified when
              <c>Initialize</c> was invoked.
            </summary>
            <remarks>
              <para>
                Invoked only by Constructors.
              </para>
            </remarks>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.GenerateKey(System.String,System.Byte[])">
            <summary>
              Generates the key.
            </summary>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.DumpBuffer(System.String,System.Byte[])">
            <summary>
              Helper method to dump to string in a 
              readable format the content of the various byte buffers.
            </summary>
            <param name = "label">The label.</param>
            <param name = "buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Security.Cryptography.SymmetricAlgorithms.LogEntry(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
              Logs the entry.
            </summary>
            <param name = "traceLevel">The trace level.</param>
            <param name = "message">The message.</param>
            <param name = "args">The args.</param>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.CipherMode">
            <summary>
              The cipher mode used by the Symmetric Algorithm.
              <para>
                The default value is 
                <see cref="F:System.Security.Cryptography.CipherMode.CBC"/>.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.PaddingMode">
            <summary>
              The padding mode used by the Symmetric Algorithm.
              <para>
                The default value is 
                <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7"/>
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.IVBytes">
            <summary>
              Bytes used as Initialization Vector (IV) for the Symmetric Algorithm.
              <para>
                If none supplied, a randomly generated one will be supplied, 
                which needs to be recorded
                in order to be used for the decryption stage.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.SaltBytes">
            <summary>
              Bytes used as Salt for converting the <c>KeyPhrase</c> 
              into a Key byte buffer (<see cref="P:XAct.Security.Cryptography.SymmetricAlgorithms.KeyBytes"/>).
              <para>
                If none supplied, the IV byte buffer will be used.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.KeyBytes">
            <summary>
              Bytes used for Key of Symmetrical Algorithm.
              <para>
                Note that this is normally not as simple as making
                a fixed size byte buffer of the <c>KeyPhrase</c>.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.EmbedSaltAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether Salt buffer is embedded 
              at head of stream, before cipher text.
              <para>
                The default value is <c>False</c>.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.EmbedKeyAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether obfuscated Key buffer is embedded 
              at head of stream, before cipher text.
              <para>
                The default value is <c>False</c>.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.EmbedIVAtHeadOfOutgoingStream">
            <summary>
              Flag indicating whether Initialization Vector (IV) buffer 
              is embedded at head of stream, before cipher text.
              <para>
                Note that the default value is <c>True</c>.
              </para>
            </summary>
        </member>
        <member name="P:XAct.Security.Cryptography.SymmetricAlgorithms.AlgorithmName">
            <summary>
              Name of the Symmetric Algorithm to use.
              <para>
                If none given in constructor, this will be set to the value
                of <see cref="F:XAct.Security.Cryptography.SymmetricAlgorithms.DefaultSymmetricalAlgorithm"/>.
              </para>
              <para>
                The property is read only.
              </para>
            </summary>
        </member>
        <member name="T:XAct.Settings.IApplicationSettingsService">
            <summary>
            The contract for a Service that returns 
            readonly Application Settings, common to 
            all instances of the application, irrespective
            of the load balanced Host it is running on.
            <para>
            Very often, the service is implemented using
            <c>XAct.Settings.ApplicationSettings.AppSettings</c>
            </para>
            <para>
            Important: although the notion of ApplicationSettings
            are umbiqutious, there are several disadvantages
            to using ApplicationSettings versus 
            <c>ProfileSettings</c> (that *can* includ readonly
            settings, which is the same as ApplicationSettings).
            One of these is that Application Settings
            are not serializeable (a separeate mechanism
            has to be created to push them to a RIA client)
            and are more an old school web server, or WinForm
            concept.
            </para>
            </summary>
        </member>
        <member name="M:XAct.Settings.IApplicationSettingsService.GetCurrentSettings``1">
            <summary>
            Retrieves the <see cref="T:XAct.Settings.Settings"/> (or a subclass of it)
            of the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TSettings">The type of the <see cref="T:XAct.Settings.Settings"/>.</typeparam>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.IApplicationSettingsService.Initialize``1(``0)">
            <summary>
            Initializes the specified settings.
            <para>
            Note: settings serializationContext information must be set first.
            </para>
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.IApplicationSettingsService.Persist(XAct.Settings.ApplicationSettings,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Persists the specified <see cref="T:XAct.Settings.Settings"/> object.
            <para>
            Any new <see cref="T:XAct.Settings.Setting"/> elements in 
            <paramref name="settings"/> will be persisted using
            ApplicationIdentifier, ZoneIdentifier, and HostIdentifier
            information retrieved from 
            <see cref="P:XAct.Settings.ApplicationSettings.ContextIdentifier"/>
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingsService.Configuration">
            <summary>
            Gets the common singleton settings shared between 
            all instances of this service
            <para>
            The Configuration object is shared between instances of 
            this service, therefore should only be modified as per the application's needs
            during Bootstrapping, and no later.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingsService.Current">
            <summary>
            Retrieves the <see cref="T:XAct.Settings.Settings"/>
            of the specified <see cref="T:System.Type"/>.
            <para>
            If the current <see cref="T:XAct.Settings.Settings"/>
            is a descendent of <see cref="T:XAct.Settings.Settings"/>,
            and you don't want to have to cast it
            to the right type, consider using <see cref="M:XAct.Settings.IApplicationSettingsService.GetCurrentSettings``1"/>
            instead.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:XAct.Settings.IApplicationSettingsServiceConfiguration">
            <summary>
            Contract for a configuration package to be injected 
            into an implementation of <see cref="T:XAct.Settings.IApplicationSettingsService"/>.
            </summary>
        </member>
        <member name="T:XAct.Settings.ISettingsServiceConfiguration">
            <summary>
            Contract for a configuration package 
            for the <see cref="T:XAct.Settings.ISettingsService"/>
            </summary>
        </member>
        <member name="M:XAct.Settings.ISettingsServiceConfiguration.Build``1">
            <summary>
            Instantiates a <see cref="T:XAct.Settings.Settings"/> object 
            (or subclass of <see cref="T:XAct.Settings.Settings"/> 
            if <c>SetAppSettingType{TSettings}</c> was invoked prior).
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.ISettingsServiceConfiguration.Initialize``1(``0,System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Initializes the type of the <see cref="T:XAct.Settings.Settings"/>
            object to be Instantiated when <c>Build{TSettings}</c>
            is invoked.
            <para>
            If not set, the default action is to return
            a <see cref="T:XAct.Settings.Settings"/> (not a subclass).
            </para>
            <para>
            If invoked, this method should be invoked
            early, during the Application Bootstrap
            sequence, then left as is.
            </para>
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="appSetting">The application setting.</param>
            <param name="zoneOrTier">The zone or tier.</param>
            <param name="isUnlockedCallback">The is unlocked callback.</param>
            <param name="isReadAuthorizedCallback">The is read authorized callback.</param>
            <param name="isWriteAuthorizedCallback">The is write authorized callback.</param>
            <param name="auditChanges">if set to <c>true</c> [audit changes].</param>
        </member>
        <member name="P:XAct.Settings.ISettingsServiceConfiguration.AuditChanges">
            <summary>
            Gets or sets a value indicating whether to audit changes.
            </summary>
            <value>
              <c>true</c> if [audit changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Settings.ISettingsServiceConfiguration.IsUnlockedCallback">
            <summary>
            Function to process 
            a <see cref="P:XAct.Settings.SerializedApplicationSetting.IsUnlockedInformation"/>
            and return a <c>bool</c> result.
            </summary>
        </member>
        <member name="P:XAct.Settings.ISettingsServiceConfiguration.IsReadAuthorizedCallback">
            <summary>
            Function to process 
            a <see cref="P:XAct.Settings.SerializedApplicationSetting.IsReadableAuthorisationInformation"/>
            and return a <c>bool</c> result.
            </summary>
        </member>
        <member name="P:XAct.Settings.ISettingsServiceConfiguration.IsWriteAuthorizedCallback">
            <summary>
            Function to process 
            a <see cref="P:XAct.Settings.SerializedApplicationSetting.IsWritableAuthorisationInformation"/>
            and return a <c>bool</c> result.
            </summary>
        </member>
        <member name="P:XAct.Settings.ISettingsServiceConfiguration.SettingsType">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Settings.IApplicationSettingScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingScope.EnvironmentIdentifier">
            <summary>
            Gets or sets the environment identifier
            (eg: DEV, ST, SIT, UAT, PP, PROD, etc.)
            <para>
            If Empty, applies to all Environments.
            </para>
            <para>
            Part of a unique Index applied to datastorage.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingScope.ZoneOrTierIdentifier">
            <summary>
            Gets or sets the optional identifier/name of the zone/tier the Settings are for.
            </summary>
            <value>
            The zone or tier identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingScope.HostIdentifier">
            <summary>
            Gets or sets the optional identifier/name of the host server the Settings are for.
            </summary>
            <value>
            The host identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingScope.TennantIdentifier">
            <summary>
            Gets or sets the unique Identifier
            for the current application Tennant
            (in most cases, this is the Organisation).
            </summary>
            <value>
            The tennant identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.IApplicationSettingsServiceConfiguration.PersistUsingLocalTime">
            <summary>
            By default auditing of settings changes
            is done with Utc time.
            <para>
            Override if you really must (never recommended).
            </para>
            </summary>
            <value>
            <c>true</c> if [persist using local time]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:XAct.Settings.IModuleSettingGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:XAct.Settings.IModuleSettingGroup.HasAccess">
            <summary>
            Gets a value indicating whether this instance has access.
            </summary>
            <value>
            	<c>true</c> if this instance has access; otherwise, <c>false</c>.
            </value>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.ApplicationSettingAudit">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Settings.ApplicationSettingAudit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ApplicationSettingAudit"/> class.
            </summary>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.Timestamp">
            <summary>
            Gets or sets the datastore concurrency check timestamp.
            <para>
            Note that this is filled in when persisted in the db --
            so it's usable to determine whether to generate the
            Guid <c>Id</c>.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.ApplicationTennantId">
            <summary>
            Gets or sets the organisation id of the record
            within a multi-tenant application.
            <para>
            Design tip: it is preferable to allow users to register only online,
            but if the app has to allow the creation of new users/tenants offline,
            investigate <see cref="T:XAct.IDistributedIdService"/>
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.Key">
            <summary>
            Gets or sets the key.
            <para>Member defined in<see cref="T:XAct.IHasKey"/></para>
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.SettingFK">
            <summary>
            Gets or sets the FK to the <see cref="T:XAct.Settings.SerializedApplicationSetting"/>
            that this Audit is tracking.
            </summary>
            <value>
            The setting fk.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.SerializationMethod">
            <summary>
            Gets or sets the serialization method.
            <para>
            Member defined in the <see cref="T:XAct.IHasSerializedTypeValueAndMethod"/> contract.
            </para>
            </summary>
            <value>
            The serialization method.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.SerializedValueType">
            <summary>
            Gets or sets the Assembly qualified name of the Value that is serialized.
            <para>
            Member defined in the <see cref="T:XAct.IHasSerializedTypeValueAndMethod"/> contract.
            </para>
            </summary>
            <value>
            The type.
            </value>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.SerializedValue">
            <summary>
            Gets or sets the serialized value.
            <para>
            Member defined in the <see cref="T:XAct.IHasSerializedTypeValueAndMethod"/> contract.
            </para>
            </summary>
            <value>
            The value.
            </value>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.CreatedOnUtc">
            <summary>
            Gets the date this entity was created, expressed in UTC.
            <para>Member defined in <see cref="T:XAct.IHasDateTimeTrackabilityUtc"/>.</para>
            </summary>
            <internal>
            There are many arguments for wanting variables of a certain
            type to be grouped together by Type (DateCreated, DateUpdated,DateDeleted)
            and it's very very tempting...but in the long run, I can't see
            it being right decision to go against the whole nomenclature of C#
            just to give better Intellisense in VS...
              </internal>
              <internal>
            As to why its Nullable: sometimes the contract is applied to items
            that are not Entities themselves, but pointers to objects that are not known
            if they are
              </internal>
              <internal>
            The value is Nullable due to SQL Server.
            There are times where one needs to create an Entity, before knowing the Create
            date. In such cases, it is *NOT* appropriate to set it to UtcNow, nor DateTime.Empty,
            as SQL Server cannot store dates prior to Gregorian calendar.
              </internal>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.CreatedBy">
            <summary>
            Gets or sets the who created the record.
            <para>Member defined in<see cref="T:XAct.IHasDateTimeCreatedBy"/></para>
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.CreatedByOrganisation">
            <summary>
            Gets or sets the who created the record.
            <para>Member defined in<see cref="T:XAct.IHasDateTimeCreatedBy"/></para>
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.SerializedPreviousValue">
            <summary>
            Gets or sets the serialized previous value.
            </summary>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingAudit.Tag">
            <summary>
            Gets the tag of the object.
            <para>Member defined in<see cref="T:XAct.IHasTag"/></para>
            <para>Can be used to associate information -- such as an image ref -- to a SelectableItem.</para>
            </summary>
            <value>
            The name.
            </value>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="T:XAct.Settings.ApplicationSettings">
            <summary>
            Settings specific for Application scope 
            (cached for long durations, 
            rather than retrieved on every request).
            </summary>
        </member>
        <member name="T:XAct.Settings.Settings">
            <summary>
            A serializeable package of partitioned Settings, 
            appropriate for an enterprise application that allows 
            pluggable 3rd parties to employ settings as well.
            </summary>
            <remarks>
            <para>
            A <see cref="T:XAct.Settings.Settings"/> can have Settings directly embedded in it.
            <code>
            <![CDATA[
            Settings profile = new Settings();
            profile.AddSetting("KeyA",typeof(int),3);
            ...
            int result1 = profile.GetSetting("KeyA").GetValue<int>();
            int result2 = profile.GetValue<int>("KeyA");
            ]]>
            </code>
            In addition, to allow tidy compartimentalization, 
            a <see cref="T:XAct.Settings.Settings"/>, can have one or more nested 
            <see cref="T:XAct.Settings.SettingGroup"/>, that in turn can have more settings:
            <code>
            <![CDATA[
            Settings profile = new Settings();
            profile["SubGroupA"]["SubGroupB"].AddSetting("KeyA",typeof(int),3);
            ...
            int result1 = profile["SubGroupA"]["SubGroupA1"].GetSetting("KeyA").GetValue<int>();
            int result2 = profile["SubGroupA"]["SubGroupA1"].GetValue<int>("KeyA");
            ]]>
            </code>
            </para>
            <para>
            In addition, a Settings can reference a collection of Module Settings.
            Note that each Module manages it properties separately.
            <code>
            <![CDATA[
            Settings profile = new Settings();
            profile.GetModule("A").["SubGroupA"].AddSetting("KeyA",typeof(int),3);
            ...
            int result1 = profile.GetModule("A").["SubGroupA"].GetSetting("KeyA").GetValue<int>();
            int result2 = profile.GetModule("A").["SubGroupA"].GetValue<int>("KeyA");
            ]]>
            </code>
            </para>
            <para>
            A Settings is serializable.
            </para>
            </remarks>
            <internal>
            <para>
            A Settings is a ModuleSettingsGroup, which is a SettingsGroup.
            </para>
            </internal>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.ModuleSettingGroup">
            <summary>
            The base <see cref="T:XAct.Settings.SettingGroup"/>,
            which is the true location of the <see cref="T:XAct.Settings.SettingCollection"/>
            to which nested <see cref="T:XAct.Settings.SettingGroup"/>s point back to.
            <para>
            Profile is a special case of <see cref="T:XAct.Settings.ModuleSettingGroup"/>
            </para>
            </summary>
        </member>
        <member name="T:XAct.Settings.SettingGroup">
            <summary>
            A Group of <see cref="T:XAct.Settings.Settings"/>
            nested under a <see cref="T:XAct.Settings.Settings"/>
            </summary>
            <internal>
            <para>
            SettingsGroup is an interesting piece of architecture because
            SettingsGroup is actually a fake. It doesn't really have a child 
            collection of Settings. It's just a mechanism to point back
            to the parent ModuleSettingsGroup (which is a SettingsGroup in its own right), 
            which is where the true Collection of objects
            is located.
            </para>
            <para>
            The reason for this architecture is that it is less iterative
            when loading/saving, so it can be used to pick up and save the variables
            with only one hit to the data persistence mechanism, rather than 
            several, one for each variable group.
            </para>
            </internal>
        </member>
        <member name="T:XAct.Settings.ISettingGroup">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Settings.ISettingValueAccessor">
            <summary>
            Contract that  
            <see cref="T:XAct.Settings.SettingGroup"/>
            implements.
            </summary>
        </member>
        <member name="M:XAct.Settings.ISettingValueAccessor.GetSettingValue``1(System.String)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            <para>
            Raises an Exception if the Setting is not found.
            </para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the property.</param>
            <returns></returns>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ISettingValueAccessor.TryGetSettingValue``1(System.String,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.ISettingValueAccessor.TryGetSettingValue``1(System.String,``0@,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="value">The value.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.ISettingValueAccessor.SetSettingValue``1(System.String,``0)">
            <summary>
            Sets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            <para>
            Raises an Exception if the Setting is not found.
            </para>
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="T:XAct.Settings.IProfileSettingCollectionAccessor">
            <summary>
            Contract used by the Persistors to access the internal property.
            </summary>
            <internal>
            The reason for this contract is that the internal
            collection -- whether it be Module or Profile -- should
            only be used to Hydrate and persist the collection.
            All other operations should go through the accessor methods.
            </internal>
        </member>
        <member name="P:XAct.Settings.IProfileSettingCollectionAccessor.Settings">
            <summary>
            Gets the settings collection.
            </summary>
            <value>The settings collection.</value>
        </member>
        <member name="M:XAct.Settings.ISettingAccessor.RetrieveSetting(System.String)">
            <summary>
            Retrieves the specified *existing* (already Added) setting.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <returns></returns>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="F:XAct.Settings.SettingGroup.SettingPathSeparator">
            <summary>
            The char used to separate parts of a Setting Name.
            <para>
            Value is '\\'
            </para>
            </summary>
        </member>
        <member name="F:XAct.Settings.SettingGroup.ParentGroup">
            <summary>
            Direct parent 
            <see cref="T:XAct.Settings.SettingGroup"/>,
            <see cref="T:XAct.Settings.ModuleSettingGroup"/>, 
            or <see cref="T:XAct.Settings.Settings"/>.
            </summary>
        </member>
        <member name="M:XAct.Settings.SettingGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingGroup"/> class.
            </summary>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingGroup"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.#ctor(XAct.Settings.SettingGroup,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingGroup"/> class.
            </summary>
            <param name="parentProfileSettingsGroup">The parent profile settings group.</param>
            <param name="groupName">Name of the group.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="F:XAct.Settings.SettingGroup._settingsCollection">
            <summary>
            Gets the dictionary of registered core properties.
            </summary>
            <value>The properties.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.ContainsSetting(System.String)">
            <summary>
            Gets the specified <see cref="T:XAct.Settings.Setting"/> (from which one can get its <c>Value</c>).
            </summary>
            <param name="settingName">Name of the setting.</param>
            <returns>
              <c>true</c> if the specified setting name contains setting; otherwise, <c>false</c>.
            </returns>
            <internal>8/17/2011: Sky</internal>
              <internal>8/17/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.RetrieveSetting(System.String)">
            <summary>
            Retrieves the specified *existing* (already Added) setting.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <returns></returns>
            <internal>8/17/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.GetSettingValue``1(System.String)">
            <summary>
            Gets the value of the specified property value.
            <para>
            Throws an exception if the property is not available.
            </para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the property.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.TryGetSettingValue``1(System.String,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            <para>
            Raises an Exception if the Setting is not found.
            </para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.TryGetSettingValue``1(System.String,``0@,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="value">The value.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.SetSettingValue``1(System.String,``0)">
            <summary>
            Sets the Value property of the specified <see cref="T:XAct.Settings.Setting"/> value.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="settingName"></param>
            <param name="settingValue"></param>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.AddSetting``1(System.String,System.Object,XAct.Settings.SettingEditingMetadata,System.String,System.String,System.String,System.Boolean,XAct.Domain.OfflineModelState)">
            <summary>
            Adds the setting.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="settingEditingMetadata">The setting editing information.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
            <param name="offlineModelState">State of the offline model.</param>
            <exception cref="T:System.ArgumentException">This SettingsGroup has been initialized: cannot add additional Settings.</exception>
        </member>
        <member name="M:XAct.Settings.SettingGroup.AddSetting(System.String,System.Type,System.Object,XAct.Settings.SettingEditingMetadata,System.String,System.String,System.String,System.Boolean,XAct.Domain.OfflineModelState)">
            <summary>
            Adds the setting.
            </summary>
            <param name="name">The name.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="settingEditingMetadata">The setting editing information.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
            <param name="offlineModelState">State of the offline model.</param>
            <exception cref="T:System.ArgumentException">This SettingsGroup has been initialized: cannot add additional Settings.</exception>
        </member>
        <member name="M:XAct.Settings.SettingGroup.AddSetting(XAct.Settings.Setting,System.Boolean)">
            <summary>
            INTERNAL USE ONLY: Adds the setting.
            </summary>
            <param name="setting">The setting.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
            <exception cref="T:System.ArgumentException">Setting '{0}' already a member of collection..FormatStringCurrentUICulture(setting.Name)</exception>
        </member>
        <member name="M:XAct.Settings.SettingGroup.TryGetSetting(System.String,XAct.Settings.Setting@)">
            <summary>
            Tries to get the specified Setting.
            </summary>
            <param name="key">The key.</param>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.SettingGroup.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.Settings.SettingGroup.PropertyChanging"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:XAct.Settings.SettingGroup.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:XAct.Settings.SettingGroup.BuildupNamePrefix(XAct.Settings.SettingGroup)">
            <summary>
            Buildups the name prefix by iterating through all parent 
            <see cref="T:XAct.Settings.SettingGroup"/>s.
            <para>
            End up with something like 'GroupA\SubGroup\SettingName'
            </para>
            </summary>
            <param name="parentProfileSettingsGroup">The parent profile settings group.</param>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.BuildFullPropertyName(System.String,System.Boolean)">
            <summary>
            Takes the given name (without path separator)
            and prefixes it with the <see cref="P:XAct.Settings.SettingGroup.NamePrefix"/>
            so that i can then be passed back to the Root Profile
            where the SettingsCollection is...
            <para>
            Builds the full name of the property.
            </para>
            </summary>
            <param name="settingName">Name of the property.</param>
            <param name="allowSeparator">if set to <c>true</c> [allow separator].</param>
            <returns></returns>
            <internal>8/14/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XAct.Settings.SettingGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:XAct.Settings.SettingGroup.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when deserializing.
            </summary>
            <param name="streamingContext">The streaming context.</param>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="E:XAct.Settings.SettingGroup.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            <para>Defined in INotifyPropertyChanged</para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="E:XAct.Settings.SettingGroup.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            <para>Defined in INotifyPropertyChanging</para>
            </summary>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingGroup.Item(System.String)">
            <summary>
            Gets the nested 
            <see cref="T:XAct.Settings.SettingGroup"/> 
            with the specified setting name.
            </summary>
            <value></value>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingGroup.XAct#Settings#IProfileSettingCollectionAccessor#Settings">
            <summary>
            Gets the dictionary of registered core properties.
            </summary>
            <value>The properties.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingGroup.NamePrefix">
            <summary>
            Gets or sets the name prefix.
            <para>
            Unlike <see cref="P:XAct.Settings.SettingGroup.Name"/>, this does contain the 
            name of any parent groups.
            </para>
            <para>
            Note: ends with a FieldNameSeparator.
            </para>
            </summary>
            <value>The name prefix.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingGroup.Name">
            <summary>
            Gets the name of the <see cref="T:XAct.Settings.SettingGroup"/>.
            <para>
            The name is not suffixed with the names of any parent groups.
            </para>
            </summary>
            <value>The name.</value>
            <internal>8/13/2011: Sky</internal>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="F:XAct.Settings.ModuleSettingGroup.ModuleSeparatorCharacter">
            <summary>
            Character used to separate name of Module (if it exists)
            from Var path.
            </summary>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ModuleSettingGroup"/> class.
            </summary>
            <internal>8/15/2011: Sky</internal>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroup.#ctor(System.String,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ModuleSettingGroup"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="hasAccess">The has access.</param>
            <internal>8/13/2011: Sky</internal>
            <internal>8/15/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroup.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when serializing.
            </summary>
            <internal>
            We can't serialize the method...but we 
            can freeze the result of the method call:
            </internal>
            <param name="streamingContext">The streaming context.</param>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroup.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when [deserializing].
            </summary>
            <internal>
            On the client side, we didn't get a fully serialized method
            we only got a serialized bool result of that server side method.
            Best we can put back a method
            that wraps the frozen value. It's not great logic,
            but someone can write a partial class on the receiving
            side that overrides it
            </internal>
            <param name="streamingContext">The streaming context.</param>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Settings.ModuleSettingGroup.HasAccess">
            <summary>
            Gets a value indicating whether this instance has access.
            </summary>
            <value>
            	<c>true</c> if this instance has access; otherwise, <c>false</c>.
            </value>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.ISettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Settings.ISettings.GetModule(System.String,System.Func{System.Boolean})">
            <summary>
            Gets the specified module (usually a Vendor or similar set of variables) .
            <para>
            If found, returns it.
            </para>
            <para>
            If not found, 
            dynamically adds the required Module before return it.
            </para>
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="hasAccess">The otional hasAccess func/logic (only required during initialization stage).</param>
            <returns></returns>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Settings.GetModule(System.String,System.Func{System.Boolean})">
            <summary>
            Gets the specified module (usually a Vendor or similar set of variables) .
            <para>
            If found, returns it.
            </para>
            <para>
            If not found, 
            dynamically adds the required Module before return it.
            </para>
            </summary>
            <param name="moduleName">Name of the module.</param>
            <param name="hasAccess">The otional hasAccess func/logic (only required during initialization stage).</param>
            <returns></returns>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Settings.TryGetSettingValue``1(System.String,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            <para>
            Raises an Exception if the Setting is not found.
            </para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.Settings.TryGetSettingValue``1(System.String,``0@,``0)">
            <summary>
            Gets the Value property of the specified *existing* (already Added) <see cref="T:XAct.Settings.Setting"/> value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="value">The value.</param>
            <param name="defaultValueIfNotFound">The default value if not found.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.Settings.TryGetSetting(System.String,XAct.Settings.Setting@)">
            <summary>
            Tries to get the specified Setting.
            </summary>
            <param name="key">The key.</param>
            <param name="setting">The setting.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.Settings.AddSetting``1(System.String,System.Object,XAct.Settings.SettingEditingMetadata,System.String,System.String,System.String,System.Boolean,XAct.Domain.OfflineModelState)">
            <summary>
            Adds the setting.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="settingEditingInformation">The setting editing information.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
            <param name="offlineModelState">State of the offline model.</param>
        </member>
        <member name="M:XAct.Settings.Settings.AddSetting(System.String,System.Type,System.Object,XAct.Settings.SettingEditingMetadata,System.String,System.String,System.String,System.Boolean,XAct.Domain.OfflineModelState)">
            <summary>
            Adds the setting.
            </summary>
            <param name="name">The name.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="settingEditingInformation">The setting editing information.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
            <param name="offlineModelState">State of the offline model.</param>
        </member>
        <member name="M:XAct.Settings.Settings.AddSetting(XAct.Settings.Setting,System.Boolean)">
            <summary>
            INTERNAL USE ONLY: Adds the setting.
            </summary>
            <param name="setting">The setting.</param>
            <param name="throwExceptionIfAlreadyAdded">if set to <c>true</c> [throw exception if already added].</param>
        </member>
        <member name="M:XAct.Settings.Settings.GetSettingValue``1(System.String)">
            <summary>
            Gets the value of the specified property value.
            <para>
            Throws an exception if the property is not available.
            </para>
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="settingName">Name of the property.</param>
            <returns></returns>
            <internal>8/13/2011: Sky</internal>
              <internal>8/13/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.Settings.ExtractModuleAndPath(System.String,System.String@,System.String@,System.Type@)">
            <summary>
            Helper method to parse a given Setting Path into a module name if it exists, and the subpath in the module.
            </summary>
            <param name="key">The key.</param>
            <param name="moduleName">Name of the module.</param>
            <param name="variablePath">The variable path.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:XAct.Settings.Settings.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Settings.Settings.Modules">
            <summary>
            Gets the module settings group collection.
            </summary>
            <value>
            The module settings group collection.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettings.ContextIdentifier">
            <summary>
            Gets or sets 
            (optional)
            information as to the query specs used to assemble
            this <see cref="T:XAct.Settings.Settings"/>' <see cref="T:XAct.Settings.Setting"/>s.
            </summary>
        </member>
        <member name="T:XAct.Settings.ModuleSettingGroupCollection">
            <summary>
            A key'ed collection of <see cref="T:XAct.Settings.ModuleSettingGroup"/> items.
            <para>
            Used to back <see cref="T:XAct.Settings.Settings"/> indexer.
            </para>
            </summary>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroupCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ModuleSettingGroupCollection"/> class.
            </summary>
        </member>
        <member name="M:XAct.Settings.ModuleSettingGroupCollection.GetKeyForItem(XAct.Settings.ModuleSettingGroup)">
            <summary>
            Gets the key for item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.ProfileServiceBase">
            <summary>
            An abstract implementation of <see cref="T:XAct.Settings.IProfileSettingsService"/>.
            </summary>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.IProfileSettingsService">
            <summary>
            Contract for a service that returns user settings.
            </summary>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="T:XAct.Settings.ISettingsService">
            <summary>
            Contract for a service that returns
            manages a single copy of a 
            <see cref="T:XAct.Settings.Settings"/> 
            (or a descendent of <see cref="T:XAct.Settings.Settings"/>).
            <para>
            The contract is the basis of:
            <c>IApplicationSettingsService</c>
            and 
            <c>IUserSettingsService</c>.
            </para>
            </summary>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.ISettingsService.GetCurrentSettings``1">
            <summary>
            Retrieves the <see cref="T:XAct.Settings.Settings"/> (or a subclass of it)
            of the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TSettings">The type of the <see cref="T:XAct.Settings.Settings"/>.</typeparam>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.ISettingsService.Persist">
            <summary>
            Persists the <see cref="P:XAct.Settings.ISettingsService.Current"/>
             <see cref="T:XAct.Settings.Settings"/>.
            <para>
            Any new <see cref="T:XAct.Settings.Setting"/> elements in the 
            <see cref="P:XAct.Settings.ISettingsService.Current"/>
            <see cref="T:XAct.Settings.Settings"/> will be persisted using
            ZoneIdentifier, and HostIdentifier
            information retrieved from 
            <c>ApplicationSettings.ContextIdentifier</c>
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.ISettingsService.Current">
            <summary>
            Retrieves the <see cref="T:XAct.Settings.Settings"/>
            of the specified <see cref="T:System.Type"/>.
            <para>
            If the current <see cref="T:XAct.Settings.Settings"/>
            is a descendent of <see cref="T:XAct.Settings.Settings"/>,
            and you don't want to have to cast it
            to the right type, consider using <see cref="M:XAct.Settings.ISettingsService.GetCurrentSettings``1"/>
            instead.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="F:XAct.Settings.ProfileServiceBase._typeName">
            <summary>
            The name of the current Type (used for logging purposes).
            </summary>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.#ctor(XAct.Diagnostics.ITracingService,XAct.State.IContextStateService)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ProfileServiceBase"/> class.
            </summary>
            <param name="tracingService">The logging service.</param>
            <param name="contextStateService"> </param>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.Persist">
            <summary>
            Saves the current IIdentity's settings.
            </summary>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.GetCurrentSettings``1">
            <summary>
            Gets the current IIdentity's settings.
            <para>
            <code>
            <![CDATA[
            // Retrieve default settings:
            Settings profile = _profileSettings.Current();
            ]]>
            </code>
            </para>
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <returns></returns>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.InternalRetrieve``1(System.String)">
            <summary>
            Internals the retrieve.
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.GetIdsOfOnlyTheModulesRegisteredForThisApp``1">
            <summary>
            Gets the ids of modules in app that user is allowed to use.
            </summary>
            <typeparam name="TIdType">The type of the id type.</typeparam>
            <returns></returns>
            <internal><para>8/16/2011: Sky</para></internal>
            <internal>
            In a multi-enterprise portal system, there could be hundreds 
            of 3rdPartyModules - hopefully thousands.
            <para>
            In a single enterprise, there might even by many tens of modules
            that have been purchased for the app. 
            </para>
            <para>
             Hence, we dont' want to recurse through settings for each and 
            every module - we just want the Modules loaded into 
            this application instance, that the user has access rights to
            with the current Roles the user is a member of.
            </para>
            </internal>
        </member>
        <member name="M:XAct.Settings.ProfileServiceBase.GetDefaultSettings``1(``0)">
            <summary>
            Gets the default settings.
            </summary>
            <param name="moduleId">The module id.</param>
            <returns></returns>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.ProfileServiceBase.TracingService">
            <summary>
            Gets the tracing service used by this service.
            </summary>
            <value>The tracing service.</value>
        </member>
        <member name="P:XAct.Settings.ProfileServiceBase.ContextStateService">
            <summary>
            Gets the context state service.
            </summary>
            <value>
            The context state service.
            </value>
        </member>
        <member name="P:XAct.Settings.ProfileServiceBase.Current">
            <summary>
            Retrieves the <see cref="T:XAct.Settings.Settings"/> (or a subclass of it)
            of the specified <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:XAct.Settings.Setting">
            <summary>
            The base class for a <see cref="T:XAct.Settings.Settings"/>.
            </summary>
            <remarks>
            <para>
            SettingBase extends <see cref="T:XAct.EditableValue`1"/>
            parameter, adding
            <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>DefaultValue</c>
            and 
            <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>IsUnlocked</c>
            parameters
            </para>
            <para>
            See also <see cref="T:XAct.Settings.SettingCollection"/>
            </para>
            </remarks>
            <internal>
            NOTE: The reason for the separation between Setting and SettingBase
            is that SettingBase can be generic -- and potentially reused somewhere
            else in the future.
            </internal>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.ISetting`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:XAct.Settings.ISetting">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Settings.ISetting`1.ResetValue">
            <summary>
            Resets the Current Value to the <see cref="P:XAct.Settings.SettingEditingMetadata.DefaultValue"/>.
            </summary>
            <returns></returns>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Setting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.Setting"/> class.
            </summary>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Setting.#ctor(System.Guid,System.String,System.Type,System.Object,System.String,System.String,System.String,XAct.Settings.SettingEditingMetadata,XAct.Domain.OfflineModelState)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.Setting"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="editingMetadata">The editing metadata.</param>
            <param name="offlineModelState">State of the offline model.</param>
        </member>
        <member name="M:XAct.Settings.Setting.#ctor(System.String,System.Type,System.Object,System.String,System.String,System.String,XAct.Settings.SettingEditingMetadata,XAct.Domain.OfflineModelState)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.Setting"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <param name="tag">The tag.</param>
            <param name="description">The description.</param>
            <param name="metadata">The metadata.</param>
            <param name="editingMetadata">The setting editing information.</param>
            <param name="offlineModelState">State of the offline model.</param>
        </member>
        <member name="M:XAct.Settings.Setting.SetValue(System.Object)">
            <summary>
            Sets the value if different to current value.
            <para>
            If <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>IsUnlocked</c> = <c>False</c>,
            a <see cref="T:System.Security.SecurityException"/> is raised.
            </para>
            <para>
            Invokes <see cref="M:XAct.EditableValue`1.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)"/>
            and
            <see cref="M:XAct.EditableValue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            </para>
            </summary>
            <param name="value">The value.</param>
            <internal>8/13/2011: Sky</internal>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Security.SecurityException">Write Access is currently denied to {0}.FormatStringCurrentCulture(Name)</exception>
        </member>
        <member name="M:XAct.Settings.Setting.GetValue">
            <summary>
            Gets the Setting's Typed value.
            </summary>
            <returns></returns>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Setting.ResetValue">
            <summary>
            Resets the Current Value to the <see cref="T:XAct.Settings.Setting"/>'s <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>DefaultValue</c>.
            </summary>
            <returns></returns>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.Setting.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:XAct.Settings.Setting.InternalRemoveModuleFromName">
            <summary>
            Internals Helper.
            If the Setting name contains a Module name, removes Module name from Setting Name.
            </summary>
        </member>
        <member name="M:XAct.Settings.Setting.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:XAct.Settings.Setting.Id">
            <summary>
            Gets the settings unique identifier, if already set.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.Setting.Name">
            <summary>
            Gets the setting's Name.
            </summary>
            <value>The name.</value>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.Setting.Value">
            <summary>
            Gets or sets the value.
            depending on values of 
            <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>IsReadAuthorized</c>, 
            <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>IsWriteAuthorized</c>, 
            and/or <see cref="P:XAct.Settings.Setting.EditingMetadata"/>.<c>IsUnlocked</c>.
            </summary>
            <internal>
            Override forces it to use this GetValue/SetValue so that it goes through checks.
            </internal>
            <value>The value.</value>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.Setting.Tag">
            <summary>
            Gets an optional tag to help processors.
            </summary>
            <value>The Tag.</value>
        </member>
        <member name="P:XAct.Settings.Setting.Description">
            <summary>
            Gets an optional tag to help processors.
            </summary>
            <value>The Tag.</value>
        </member>
        <member name="P:XAct.Settings.Setting.Metadata">
            <summary>
            Gets an optional metadata to help processors.
            </summary>
            <value>The Tag.</value>
        </member>
        <member name="P:XAct.Settings.Setting.EditingMetadata">
            <summary>
            Gets the setting's (optional) information 
            required to *update* the setting (IsLocked, IsWriteAuthorized, SerializationMethod, SerializedValue, etc).
            </summary>
            <value>
            The setting editing information.
            </value>
        </member>
        <member name="T:XAct.Settings.SettingCollection">
            <summary>
            A dictionary of <see cref="T:XAct.Settings.Setting"/> items.
            </summary>
            <internal>
            This is used to back the root <see cref="T:XAct.Settings.Settings"/> Settings dictionary,
            which optional nested <see cref="T:XAct.Settings.SettingGroup"/>s obfuscate.
            </internal>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingCollection"/> class.
            </summary>
        </member>
        <member name="M:XAct.Settings.SettingCollection.GetFilteredItems(XAct.Domain.OfflineModelState)">
            <summary>
            Gets the items in the collection that match the given <paramref name="modelState"/>.
            <para>
            Used to find the items in the collection that need persisting.
            </para>
            </summary>
            <param name="modelState">State of the model.</param>
            <returns></returns>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingCollection.GetKeyForItem(XAct.Settings.Setting)">
            <summary>
            As the item is added to the collection, gets the key for item.
            </summary>
            <param name="item">The item.</param>
            <para>Member defined in<see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/></para>
            <returns></returns>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:XAct.Settings.SettingEditingMetadata">
            <summary>
            Information beyond a <see cref="T:XAct.Settings.Setting"/>'s Value,
            required for Editing the setting 
            (IsLocked, IsWriteAuthorized, Source Record (the <see cref="T:XAct.Settings.SerializedApplicationSetting"/>)
            </summary>
        </member>
        <member name="F:XAct.Settings.SettingEditingMetadata._defaultValue">
            <summary>
            The default value. 
            </summary>
            <internal>
            The Generic value will be serialized as an Object.
            </internal>
        </member>
        <member name="M:XAct.Settings.SettingEditingMetadata.#ctor(System.Object,System.Func{System.Boolean},System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingEditingMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="isUnlockedFunc">The is unlocked function.</param>
            <param name="isReadAuthorizedFunc">The is read authorized function.</param>
            <param name="isWriteAuthorizedFunc">The is write authorized function.</param>
        </member>
        <member name="M:XAct.Settings.SettingEditingMetadata.InitializeAuthorizationFuncs(System.Func{System.Boolean},System.Func{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Setups the funcs.
            </summary>
            <param name="isUnlocked">The is editable.</param>
            <param name="isReadAuthorized">The has read role access.</param>
            <param name="isWriteAuthorized">The has write role access.</param>
            <internal><para>8/16/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingEditingMetadata.SerializeAuthenticationFuncMethods(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the funcs.
            </summary>
            <param name="streamingContext">The streaming context.</param>
            <internal>
            Can't do much about serializing the methods across
            the wire, but as it is being serialized,
            can freeze the setting as is:
            </internal>
        </member>
        <member name="P:XAct.Settings.SettingEditingMetadata.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingEditingMetadata.IsReadAuthorized">
            <summary>
            Gets a value indicating whether this setting is readable with the current Role membership.
            <para>Implementation of IHasReadWriteAccess</para>
            </summary>
            <value>
            	<c>true</c> if this instance is readable; otherwise, <c>false</c>.
            </value>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingEditingMetadata.IsWriteAuthorized">
            <summary>
            Gets a value indicating whether this setting is writable with the current Role membership.
            <para>Implementation of IHasReadWriteAccess</para>
            </summary>
            <value>
            	<c>true</c> if this instance is writable; otherwise, <c>false</c>.
            </value>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingEditingMetadata.IsUnlocked">
            <summary>
            Gets or sets whether the value can be set or not (or has been locked).
            <para>
            A <see cref="T:XAct.Settings.Setting"/> can be <see cref="P:XAct.Security.IHasReadWriteAuthorization.IsWriteAuthorized"/>  -- but in a Hierarchical scenario, 
            a prent <see cref="T:XAct.Settings.Setting"/> can have Locked Descendents from editing
            the value.
            </para>.
            </summary>
            <value>The state of the lock.</value>
            <internal><para>8/13/2011: Sky</para></internal>
        </member>
        <member name="P:XAct.Settings.SettingEditingMetadata.DefaultValue">
            <summary>
            Gets the default value to which to set the value if <see cref="T:XAct.Settings.Setting"/>.<c>ResetValue()</c> is invoked.
            </summary>
            <value>The default value.</value>
            <internal><para>8/14/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.Settings.SettingGroupCollection">
            <summary>
            A collection of <see cref="T:XAct.Settings.SettingGroup"/>
            </summary>
            <remarks>
            Each <see cref="T:XAct.Settings.SettingGroup"/>
            contains an array of optional nested <see cref="T:XAct.Settings.SettingGroup"/>
            </remarks>
            <internal><para>8/17/2011: Sky</para></internal>
        </member>
        <member name="M:XAct.Settings.SettingGroupCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingGroupCollection"/> class.
            </summary>
        </member>
        <member name="M:XAct.Settings.SettingGroupCollection.GetKeyForItem(XAct.Settings.SettingGroup)">
            <summary>
            Gets the key for item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
            <internal><para>8/15/2011: Sky</para></internal>
        </member>
        <member name="T:XAct.FF.Settings.Implementations.SettingRecordMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.FF.Settings.Implementations.SettingRecordMetadata.GetState">
            <summary>
            Gets or sets the state.
            <para>
            This flag is not persisted to database (hence why converted to Methods, 
            so that ORMs don't think its a datastore table attribute (without
            having to decorate it with Ignore, or other ORM specific solution).
            </para>
            </summary>
        </member>
        <member name="M:XAct.FF.Settings.Implementations.SettingRecordMetadata.SetState(XAct.Domain.OfflineModelState)">
            <summary>
            Sets the state.
            <para>
            This flag is not persisted to database (hence why converted to Methods, 
            so that ORMs don't think its a datastore table attribute (without
            having to decorate it with Ignore, or other ORM specific solution).
            </para>
            </summary>
            <param name="modelState">State of the offline model.</param>
        </member>
        <member name="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.ApplicationName">
            <summary>
            Gets or sets the optional name of the application for which this setting applices.
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.ZoneOrTier">
            <summary>
            Gets or sets the optional Application Tier for which this setting applies.
            <para>
            If Empty, applies to all Tiers -- ie, it is an Application setting.
            </para>
            </summary>
            <value>
            The zone.
            </value>
        </member>
        <member name="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.Host">
            <summary>
            Gets or sets the optional name of the Host computer this setting is intended for.
            <para>
            Note that <see cref="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.ZoneOrTier"/> is generally enough.
            </para>
            <para>
            If Empty, applies to all Hosts -- ie, it is a Tier setting.
            </para>
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.User">
            <summary>
            Gets or sets the (optional) User this setting is relevant to
            (only used by <c>IUserSettingsService</c>)
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:XAct.FF.Settings.Implementations.SettingRecordMetadata.Key">
            <summary>
            Gets or sets the <see cref="T:XAct.Settings.Setting"/>'s Fully Qualified Name (Module + Groups + Key).
            <para>Member defined in<see cref="T:XAct.IHasKey"/></para>
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:XAct.Settings.SettingRenderingHints">
            <summary>
            Rendering Information for a <see cref="T:XAct.Settings.Setting"/>
            </summary>
        </member>
        <member name="M:XAct.Settings.SettingRenderingHints.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SettingRenderingHints"/> class.
            </summary>
            <param name="renderingHintsIdentifier">The rendering hints identifier.</param>
            <param name="renderingGroupHints">The rendering group hints.</param>
            <param name="renderingOrderHint">The rendering order hint.</param>
            <param name="renderingLabelsHints">The rendering labels hints.</param>
            <param name="renderingViewControlHints">The rendering view control hints.</param>
            <param name="renderingEditControlHints">The rendering edit control hints.</param>
            <param name="renderingEditValidationControlHints">The rendering edit validation control hints.</param>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderHintsIdentifier">
            <summary>
            Gets the Identifier to an Entity Record 
            (that implements a contract similar to <see cref="T:XAct.IHasSettingRenderingHints"/>)
            describing how to render the 
            <c>Setting</c> or other similar entity.
            <para>
            IMPORTANT: 
            If this entity implements both <see cref="T:XAct.IHasRenderingHintsIdentifierReadOnly"/>
            and <see cref="T:XAct.IHasSettingRenderingHintsReadOnly"/> (probably for convenvience/faster developement)  
            one sets *either* the <see cref="P:XAct.Settings.SettingRenderingHints.RenderHintsIdentifier"/>
            *OR* the Group/Order/Label/ViewControl/EditControl/EditValidation
            values -- not both.
            </para>
            </summary>
            <value>
            The render hints identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderGroupingHints">
            <summary>
            Gets optional hints to indicate to the UI how to layout settings.
            </summary>
            <value>
            The render grouping optional hints.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderOrderHint">
            <summary>
            Gets the hint as to which order to render the Setting's control in the Group.
            </summary>
            <value>
            The render order hint.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderingImageHints">
            <summary>
            Gets a hint as to the icons to use if the full item cannot be rendered.
            <para>
            Images could be for controls tucked away, or simply rendered beside/instead of labels.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderLabelHints">
            <summary>
            Gets optional hints to indicate to the UI how to layout settings.
            </summary>
            <value>
            The render grouping optional hints.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderViewControlHints">
            <summary>
            Gets optional hints to indicate to the UI how to layout settings.
            </summary>
            <value>
            The render grouping optional hints.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderEditControlHints">
            <summary>
            Gets optional hints to indicate to the UI how to layout settings.
            </summary>
            <value>
            The render grouping optional hints.
            </value>
        </member>
        <member name="P:XAct.Settings.SettingRenderingHints.RenderEditValidationHints">
            <summary>
            Gets optional hints to indicate to the UI how to layout settings.
            </summary>
            <value>
            The render grouping optional hints.
            </value>
        </member>
        <member name="T:XAct.Settings.ApplicationSettingScope">
            <summary>
            Information as to the query specs used to assemble
            this <see cref="T:XAct.Settings.Settings"/>' <see cref="T:XAct.Settings.Setting"/>s.
            </summary>
        </member>
        <member name="M:XAct.Settings.ApplicationSettingScope.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.ApplicationSettingScope"/> class.
            </summary>
            <param name="environmentIdentifier">The application identifier.</param>
            <param name="zoneOrTierIdentifier">The zone or tier identifier.</param>
            <param name="hostIdentifier">The host identifier.</param>
            <param name="tennantIdentifier">The tennant identifier.</param>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingScope.EnvironmentIdentifier">
            <summary>
            Gets or sets the identifier/name of the
            environment (DEV, ST, SIT, PROD, etc.)
             the Settings are for.
            </summary>
            <value>
            The application identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingScope.ZoneOrTierIdentifier">
            <summary>
            Gets or sets the optional identifier/name of the zone/tier the Settings are for.
            </summary>
            <value>
            The zone or tier identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingScope.HostIdentifier">
            <summary>
            Gets or sets the optional identifier/name of the 
            host server the Settings are for.
            </summary>
            <value>
            The host identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.ApplicationSettingScope.TennantIdentifier">
            <summary>
            Gets or sets the unique Identifier
            for the current application Tennant
            (in most cases, this is the Organisation).
            </summary>
            <value>
            The tennant identifier.
            </value>
        </member>
        <member name="T:XAct.Settings.Implementations.ISettingsEditingService">
            <summary>
            Contract for a service to edit Settings on screen.
            </summary>
        </member>
        <member name="M:XAct.Settings.Implementations.ISettingsEditingService.GetSettingsForEditing(XAct.Settings.Settings)">
            <summary>
            Gets a <see cref="T:XAct.Settings.Settings"/> collection object
            with all the trimming required to render the settings
            on an UX View to edit Settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.Settings.SerializedApplicationSetting">
            <summary>
            Entity for storage of a <see cref="T:XAct.Settings.Setting"/> in a datastore (Db, AppSettings, etc).
            </summary>
        </member>
        <member name="M:XAct.Settings.SerializedApplicationSetting.Set``1(``0)">
            <summary>
            Sets the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:XAct.Settings.SerializedApplicationSetting.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:XAct.Settings.SerializedApplicationSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SerializedApplicationSetting"/> class.
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Id">
            <summary>
            Gets or sets the unique identifier of the setting.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Timestamp">
            <summary>
            Gets or sets the datastore concurrency check timestamp.
            <para>
            Note that this is filled in when persisted in the db --
            so it's usable to determine whether to generate the
            Guid <c>Id</c>.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.EnvironmentIdentifier">
            <summary>
            Gets or sets the environment identifier
            (eg: DEV, ST, SIT, UAT, PP, PROD, etc.)
            <para>
            If Empty, applies to all Environments.
            </para>
            <para>
            Part of a unique Index applied to datastorage.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.ZoneOrTierIdentifier">
            <summary>
            Gets or sets the optional Application Tier for which this setting applies.
            <para>
            If Empty, applies to all Tiers -- ie, it is an Application setting.
            </para>
            <para>
            Part of a unique Index applied to datastorage.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.HostIdentifier">
            <summary>
            Gets or sets the optional name of the Host computer this setting is intended for.
            <para>
            Note that <see cref="P:XAct.Settings.SerializedApplicationSetting.ZoneOrTierIdentifier"/> is generally enough.
            </para>
            <para>
            If Empty, applies to all Hosts -- ie, it is a Tier setting.
            </para>
            <para>
            Part of a unique Index applied to datastorage.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.TennantIdentifier">
            <summary>
            Gets or sets the optional name of the Host computer this setting is intended for.
            <para>
            Note that <see cref="P:XAct.Settings.SerializedApplicationSetting.ZoneOrTierIdentifier"/> is generally enough.
            </para>
            <para>
            If Empty, applies to all Hosts -- ie, it is a Tier setting.
            </para>
            <para>
            Part of a unique Index applied to datastorage.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Key">
            <summary>
            Gets or sets the <see cref="T:XAct.Settings.Setting"/>'s Fully Qualified Name (Module + Groups + Key).
            <para>Member defined in<see cref="T:XAct.IHasKey"/></para>
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Enabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:XAct.Settings.Setting"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.SerializationMethod">
            <summary>
            Gets or sets the serialization method.
            </summary>
            <value>
            The serialization method.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.SerializationMethodRaw">
            <summary>
            Gets or sets the serialization method raw.
            </summary>
            <value>
            The serialization method raw.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.SerializedValue">
            <summary>
            Gets or sets the serialized value.
            <para>
            Member defined in the <see cref="T:XAct.IHasSerializedTypeValueAndMethod"/> contract.
            </para>
            </summary>
            <value>
            The value.
            </value>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.SerializedDefaultValue">
            <summary>
            Gets or sets the serialized default value.
            </summary>
            <value>
            The serialized default value.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.IsReadableAuthorisationInformation">
            <summary>
            Information to help the managing Service determine whether
            the information is accessible by the current user.
            <para>
            Usually a CSV string of RoleNames, that the IAuthorisationService
            injected into the <see cref="T:XAct.Settings.ISettingsService"/>
            uses to create new <see cref="T:XAct.Settings.Setting"/>'s IsReadable.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.IsWritableAuthorisationInformation">
            <summary>
            Information to help the managing Service determine whether
            the information is accessible by the current user.
            <para>
            Usually a CSV string of RoleNames, that the IAuthorisationService
            injected into the <see cref="T:XAct.Settings.ISettingsService"/>
            uses to create new <see cref="T:XAct.Settings.Setting"/>'s IsReadable.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.IsUnlockedInformation">
            <summary>
            Information to help the managing Service determine whether
            the information is accessible by the current user,
            or was locked off higher up (note that a Setting
            can be Writable due to user having rights to his own 
            settings, but enherited a Lock, which would disable
            editing).
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.SerializedValueType">
            <summary>
            Gets or sets the Assembly qualified name of the Value that is serialized.
            <para>
            Member defined in the <see cref="T:XAct.IHasSerializedTypeValueAndMethod"/> contract.
            </para>
            </summary>
            <value>
            The type.
            </value>
            <internal>8/16/2011: Sky</internal>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Tag">
            <summary>
            Gets the tag of the object.
            <para>Member defined in<see cref="T:XAct.IHasTag"/></para>
            <para>Can be used to associate information -- such as an image ref -- to a SelectableItem.</para>
            </summary>
            <value>
            The name.
            </value>
            <internal>8/13/2011: Sky</internal>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Metadata">
            <summary>
            Gets or sets optional metadata
            that other concerns may find useful
            (eg: the UI layer, until a better solution is developed).
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Description">
            <summary>
            Gets or sets the description.
            <para>Member defined in<see cref="T:XAct.IHasDescriptionReadOnly"/></para>
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.CreatedOnUtc">
            <summary>
            Gets the date this entity was created, expressed in UTC.
            <para>Member defined in <see cref="T:XAct.IHasDateTimeTrackabilityUtc"/>.</para>
            </summary>
            <internal>
            There are many arguments for wanting variables of a certain
            type to be grouped together by Type (DateCreated, DateUpdated,DateDeleted)
            and it's very very tempting...but in the long run, I can't see
            it being right decision to go against the whole nomenclature of C#
            just to give better Intellisense in VS...
              </internal>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.LastModifiedOnUtc">
            <summary>
            Gets the date this entity was last modified, expressed in UTC.
            <para>Member defined in <see cref="T:XAct.IHasDateTimeTrackabilityUtc"/>.</para>
            <para>
            See also <see cref="T:XAct.IHasAuditability"/>.
            </para>
            <para>
            Required: Must be set prior to being saved.
            </para>
            </summary>
            <internal>
            There are many arguments for wanting variables of a certain
            type to be grouped together by Type (DateCreated, DateUpdated,DateDeleted)
            and it's very very tempting...but in the long run, I can't see
            it being right decision to go against the whole nomenclature of C#
            just to give better Intellisense in VS...
              </internal>
        </member>
        <member name="P:XAct.Settings.SerializedApplicationSetting.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="T:XAct.Settings.SerializedSettingRenderingInformation">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Settings.SerializedSettingRenderingInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Settings.SerializedSettingRenderingInformation"/> class.
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.Timestamp">
            <summary>
            Gets or sets the datastore concurrency check timestamp.
            <para>
            Note that this is filled in when persisted in the db -- 
            so it's usable to determine whether to generate the 
            Guid <c>Id</c>.
             </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderHintsIdentifier">
            <summary>
            Gets the Identifier to a Record describing how to render the
            <c>Setting</c> or other similar entity.
            <para>
            IMPORTANT: Usually one sets *either* the RenderHintsIdentifier 
            *OR* the Group/Order/Label/ViewControl/EditControl/EditValidation
            values -- not both.
            </para>
            </summary>
            <value>
            The render hints identifier.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderGroupingHints">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to group Settings together.
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderOrderHint">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to order the Settings within a Group.
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderingImageHints">
            <summary>
            Gets or sets the rendering image hints.
            <para>
            Images could be for controls tucked away, or simply rendered beside/instead of labels.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderLabelHints">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to retrieve a Resource
            for a Label.
            <para>
            In many cases it will be just the Resource Id.
            </para>
            <para>
            But it could be a richer system such as
            <code>
            label:RES_L123;Hint:RES_H123
            </code>
            </para>
            </summary>
            <value>
            The render label hints.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderViewControlHints">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to choose an appropriate platform
            specific control.
            <para>
            Examples are:
            <code>
            <![CDATA[
            * Bool
            * Int
            * Text (or String)
            * Date
            * Time
            * DateTime
            * CustomXYZ
            ]]>
            </code>
            or more verbosely:
            <code>
            <![CDATA[
            * Type:Bool
            * Type:Int
            * Type:Text;MaxLength:40;
            * Type:Date
            * Type:Time
            * Type:DateTime
            * Type:CustomXYZ
            ]]>
            </code>
            </para>
            </summary>
            <value>
            A CSS formatted string.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderEditControlHints">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to choose an appropriate platform
            specific control.
            <para>
            Examples are:
            <code>
            <![CDATA[
            * Bool
            * Int
            * Text (or String)
            * Date
            * Time
            * DateTime
            * CustomXYZ
            ]]>
            </code>
            or more verbosely:
            <code>
            <![CDATA[
            * Type:Bool
            * Type:Int
            * Type:Text;MaxLength:40;
            * Type:Date
            * Type:Time
            * Type:DateTime
            * Type:CustomXYZ
            ]]>
            </code>
            </para>
            </summary>
            <value>
            A CSS formatted string.
            </value>
        </member>
        <member name="P:XAct.Settings.SerializedSettingRenderingInformation.RenderEditValidationHints">
            <summary>
            Gets or sets hints that can be used by a 
            View rendering mechanism to choose an appropriate platform
            specific validation strategy.
            </summary>
            <value>
            A CSS formatted string.
            </value>
        </member>
        <member name="T:XAct.Threading.PrioritizedSpoolProcessor`1">
            <summary>
            An implementation of the <see cref="T:XAct.Threading.IPrioritizedSpoolProcessor"/>
            to process prioritized items using threads.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:XAct.Threading.SpoolProcessor`1">
            <summary>
            
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._tracingService">
            <summary>
            The optional tracing service.
            </summary>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._getItems">
            <summary>
            </summary>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._threadAllocationTimer">
            <summary>
            The timer is a loop to periodically invoke a delegate to retrieve items to process. 
            </summary>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._itemProcessingFunction">
            <summary>
            The function that the Thread will invoke when processing the Item.
            </summary>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._preTimerIntervalEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:XAct.Threading.SpoolProcessor`1._postTimerIntervalEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.#ctor(XAct.Diagnostics.ITracingService,System.Func{System.Int32,System.Object,`0[]},System.Func{`0,System.Boolean},System.Action,System.Action,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Threading.SpoolProcessor`1"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="getItems">The get prioritized items.</param>
            <param name="itemProcessingFunction">The item processing function.</param>
            <param name="preTimerIntervalEvent">The pre timer interval event.</param>
            <param name="preTimerIntervalEventInterval">The pre timer interval event interval.</param>
            <param name="postTimerIntervalEvent">The general cleanup function to do every timer event.</param>
            <param name="postTimerIntervalEventInterval">The post timer interval event interval.</param>
            <param name="intervalInMilliseconds">The interval in milliseconds.</param>
            <param name="minimumNumberOfAvailableThreadsRequiredToRequestNewThreads">The minimum threads.</param>
            <param name="maximumNumberOfNewThreadsToIssueAtAnyOneTime">The maximum threads.</param>
            <param name="randomizeTimerInterval">if set to <c>true</c> [randomize timer interval].</param>
            <param name="randomizeFraction">The randomize fraction.</param>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.Start">
            <summary>
            Starts the specified randomize timer interval.
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.Stop">
            <summary>
            Stop Processing the Prioritized Items.
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.PreTimerInterval">
            <summary>
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.RetrieveItemsAndAllocateThreads(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.RetrieveItems(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.AllocateAndIntializeNewWorkerThreads(`0[])">
            <summary>
            Creates intialize new worker threads
            up to the number of available threads for this trigger event.
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.AllocateAndIntializeNewWorkerThread(`0,System.String)">
            <summary>
            Retrieves a thread from the available thread pool.
            Ie, if there are 30 threads left, takes x (depending on priority)
            </summary>
            <param name="item">The item.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.PostTimerInterval">
            <summary>
            A post trigger interval operation.
            <para>
            Useful for cleaning up -- eg, ensuring that records that were marked as started, 
            but that got hung, are released, so that they can be processed again.
            </para> 
            </summary>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.Trace(XAct.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Traces the message -- if the tracing service is not null.
            </summary>
            <param name="traceLevel">The trace level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.TraceException(XAct.Diagnostics.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Traces the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="traceLevel">The trace level.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:XAct.Threading.SpoolProcessor`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:XAct.Threading.SpoolProcessor`1.TimerInterval">
            <summary>
            Gets the millisecond interval between checking whether 
            threads are available
            to issue.
            </summary>
        </member>
        <member name="P:XAct.Threading.SpoolProcessor`1.RandomizeTimerInterval">
            <summary>
            Gets a value indicating whether to randomize the interval to the next Timer event,
            by a factor of <see cref="P:XAct.Threading.SpoolProcessor`1.TimerInterval"/>, divided by <see cref="P:XAct.Threading.SpoolProcessor`1.RandomizeTimerIntervalDivisor"/>
            </summary>
            <value>
            <c>true</c> if [randomize timer interval]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Threading.SpoolProcessor`1.RandomizeTimerIntervalDivisor">
            <summary>
            If <see cref="P:XAct.Threading.SpoolProcessor`1.RandomizeTimerInterval"/> is <c>True</c>,
            Gets the divisor to use when calculating the next interval.
            </summary>
            <value>
              <c>true</c> if [random timer divisor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:XAct.Threading.SpoolProcessor`1.MinimumNumberOfAvailableThreadsRequiredToRequestNewThreads">
            <summary>
            The mimimum number of threads required to be available prior to 
            requesting new threads.
            <para>
            Explainatino:
            </para>
              <para>
            Every Timer interval, the number of available threads is checked.
              </para>
              <para>
            If the number of threads returned/available for re-issuance is less than
            this minimum threshold, nothing is done until the next timer interval.
              </para>
            <para>
            The setting can allow some release of pressure from a server that 
            is working extra hard.
            </para>
            </summary>
        </member>
        <member name="P:XAct.Threading.SpoolProcessor`1.MaximumNumberOfNewThreadsToIssueAtAnyOneTime">
            <summary>
            Gets the maximum number of new threads to issue at any one time.
            <para>
            If the number of available threads is larger than
            <see cref="P:XAct.Threading.SpoolProcessor`1.MinimumNumberOfAvailableThreadsRequiredToRequestNewThreads"/>,
            threads will be allocated. But to ensure that threads are not all in one go 
            (spiking the cpu) no more than a certain number of threads are issued
            until the next Timer interval.
            </para>
            </summary>
        </member>
        <member name="M:XAct.Threading.PrioritizedSpoolProcessor`1.#ctor(XAct.Diagnostics.ITracingService,System.Func{System.Int32,System.Object,`0[]},System.Func{`0,System.Boolean},System.Action,System.Action,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Threading.PrioritizedSpoolProcessor`1"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="retrievePrioritizedItemsFunction">The method used to retrieve prioritized items.</param>
            <param name="itemProcessingFunction">The item processing function.</param>
            <param name="preTimerIntervalEvent">The pre timer interval event.</param>
            <param name="preTimerIntervalEventInterval">The pre timer interval event interval.</param>
            <param name="postTimerIntervalEvent">The _general cleanup function to do every timer event.</param>
            <param name="postTimerIntervalEventInterval">The pro timer interval event interval.</param>
            <param name="intervalInMilliseconds">The interval in milliseconds.</param>
            <param name="minThreads">The min threads.</param>
            <param name="maximumNumberOfThreads">The max threads.</param>
        </member>
        <member name="M:XAct.Threading.PrioritizedSpoolProcessor`1.RetrieveItemsAndAllocateThreads(System.Int32)">
            <summary>
            Retrieves the items and allocate threads.
            </summary>
            <param name="totalNumberOfThreadsToAllocateThisTime">The total number of threads to allocate this time.</param>
        </member>
        <member name="T:XAct.Net.TimeoutWebClient">
            <summary>
            A WebClient that can be timed out.
            <para>
            Useful for diagnostics.
            </para>
            </summary>
        </member>
        <member name="M:XAct.Net.TimeoutWebClient.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:XAct.Net.TimeoutWebClient"/> class.
            </summary>
            <param name="timeOut">The time out.</param>
        </member>
        <member name="M:XAct.Net.TimeoutWebClient.GetWebRequest(System.Uri)">
            <summary>
            Gets the web request.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="P:XAct.Net.TimeoutWebClient.Timeout">
            <summary>
            Gets or sets the timeout (default 30 seconds).
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="T:XAct.RollingFileNameHelper">
            <summary>
            </summary>
            <internal>
              Src: http://blogs.msdn.com/rido/articles/FileRollerTraceListener.aspx
            </internal>
        </member>
        <member name="M:XAct.RollingFileNameHelper.ResolveNameOfNewRollingFile(System.DateTime,System.String,System.Boolean,System.Int32)">
            <summary>
            Returns a date resolved name -- eg 'c:\\Logs\\MyLog{yyyyMMdd}.log' gets 
            converted to 'c:\\Logs\\MyLogFile250509.log'
            </summary>
            <param name="templateFileName">'c:\\Logs\\MyLog{yyyyMMdd}.log'</param>
            <param name="currentDateTime">Now</param>
            <param name="deleteOlderFiles">true</param>
            <param name="numberOfDaysToLeaveOldFiles">14</param>
            <returns></returns>
        </member>
        <member name="M:XAct.RollingFileNameHelper.ReplaceDateTimePatternInTextWithCurrentDateTime(System.DateTime,System.String,System.String@)">
            <summary>
            Replaces the date pattern in the filename, returning something like
            </summary>
            <param name="filePath">'c:\\Logs\\MyLogFile{yyyyMMdd}.log'</param>
            <param name="now">Current DateTime</param>
            <param name="datePattern">'yyyyMMdd'</param>
            <returns>c:\\Logs\\MyLogFile20090525.log</returns>
        </member>
        <member name="M:XAct.RollingFileNameHelper.FindDateTimePatternInText(System.String)">
            <summary>
            Looks for the a pattern in the filename.
            <para>
            Eg: Extracts "yyyyMMdd" from "MyLogFile{yyyyMMdd}.log"
            </para>
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XAct.RollingFileNameHelper.GetListOfOlderFiles(System.DateTime,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="currentDateTime">Now</param>
            <param name="templateFileName">A template path -- such as 'c:\Logs\MyLogFile{yyyyMMdd}.log'.  Has to have directory info at this point)</param>
            <param name="datePattern">'yyyyMMdd'</param>
            <param name="numberOfDaysToLeaveOldFiles">numberOfDaysToLeaveOldFiles</param>
            <returns>The count of files deleted.</returns>
        </member>
        <member name="T:XAct.WebThreadAndTypeSpecificManagementServiceBase`1">
            <summary>
            Base class for ManagementServices to return a current context per thread,
            that is cloned from a default base one. Useful for having base settings, 
            but allowing customization as needed for a request.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="F:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.IsMutable">
            <summary>
            Flag determining whether values should be cloned to a new object.
            </summary>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.GetCurrent``1">
            <summary>
            Gets the existing or newly Factoried Context object.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.#ctor(XAct.Diagnostics.ITracingService,XAct.State.IContextStateService)">
            <summary>
            Initializes a new instance of the
            <see cref="T:XAct.WebThreadSpecificStackableContextManagementServiceBase`1"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="stateService">The state service.</param>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Push``1(``0)">
            <summary>
            Pushes a new context on to the Context stack, for <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.GetCurrent``1"/> to return.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Pop``1">
            <summary>
            Pops the specified context off the Context stack.
            </summary>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Count``1">
            <summary>
            Counts the number of items pushed onto the internal stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.EnsureThreadSpecificInstance``1">
            <summary>
            Returns existing or newly Factoried Context object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.GetOrCreateThreadSpecificStack``1">
            <summary>
            Gets the thread specific stack in which contexts are kept.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Create``1">
            <summary>
            Creates a new  <typeparam name="TSpecializedContext"></typeparam>.
            <para>
            Invoked by <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.GetCurrent``1"/>
            to create a thread specific instance if one doesn't exist.
            </para>
            <para>
            If <see cref="F:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.IsMutable"/>, clones the object before returning it.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CreateNewSourceInstance``1">
            <summary>
            Invoked by <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Create``1"/> to creates the source instance
            before <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.Create``1"/> calls <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CloneSourceInstanceValuesToNewThreadInstance(`0)"/>
            if <see cref="F:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.IsMutable"/>=<c>true</c>.
            </summary>
            <internal>
            Implementors can use <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CreateNewSourceInstanceHelper"/> to 
            use the ServiceLocator to create the instance.
            </internal>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CloneSourceInstanceValuesToNewThreadInstance(`0)">
            <summary>
            Clones the source instance values to the new thread specific instance.
            </summary>
            <internal>
            <para>
            Implementators can use <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CloneSourceInstanceValuesToNewThreadInstanceHelper(`0)"/> if they don't have a 
            more custom solution.
            </para>
            </internal>
            <param name="srcContext">The SRC context.</param>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CreateNewSourceInstanceHelper">
            <summary>
            Creates the new source instance using ServiceLocator.
            <para>
            The default/recommended solution for <see cref="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CreateNewSourceInstance``1"/>
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadAndTypeSpecificManagementServiceBase`1.CloneSourceInstanceValuesToNewThreadInstanceHelper(`0)">
            <summary>
            Helper method to provide cloning if the srcContext is <see cref="T:System.ICloneable"/>.
            If not, uses the <c>ObjectReflectionExtensions.CloneTheUncloneable{T}</c> extension method.
            </summary>
            <param name="srcContext">The SRC context.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.WebThreadSpecificStackableContextManagementServiceBase`1">
            <summary>
            Base class for ManagementServices to return a current context per thread,
            that is cloned from a default base one. Useful for having base settings, 
            but allowing customization as needed for a request.
            </summary>
            <internal>
            NOT Portable due to invocation of CloneTheUncloneable.
            </internal>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="F:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.IsMutable">
            <summary>
            Flag determining whether values should be cloned to a new object.
            </summary>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.#ctor(XAct.Diagnostics.ITracingService,XAct.State.IContextStateService)">
            <summary>
            Initializes a new instance of the
            <see cref="T:XAct.WebThreadSpecificStackableContextManagementServiceBase`1"/> class.
            </summary>
            <param name="tracingService">The tracing service.</param>
            <param name="stateService">The state service.</param>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.Push(`0)">
            <summary>
            Pushes a new context on to the Context stack, for <see cref="P:XAct.IHasCurrent`1.Current"/> to return.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.Pop">
            <summary>
            Pops the specified context off the Context stack.
            </summary>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.Count">
            <summary>
            Counts the number of items pushed onto the internal stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.EnsureThreadSpecificInstance">
            <summary>
            Returns existing or newly Factoried Context object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.GetOrCreateThreadSpecificStack">
            <summary>
            Gets the thread specific stack in which contexts are kept.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.Create">
            <summary>
            Creates a new Context.
            <para>
            Invoked by <see cref="P:XAct.IHasCurrent`1.Current"/>
            to create a thread specific instance if one doesn't exist.
            </para>
            <para>
            If <see cref="F:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.IsMutable"/>, clones the object before returning it.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XAct.WebThreadSpecificStackableContextManagementServiceBase`1.CloneSourceInstanceValuesToNewThreadInstance(`0)">
            <summary>
            Clones the source instance values to the new thread specific instance.
            </summary>
            <param name="srcContext">The SRC context.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.Xml.XmlNodeSerializer">
            <summary>
              Class to help serialize and deserialize objects  
              to Xml format.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeSerializer.#ctor(System.Type)">
            <summary>
              Initializes a new instance of the <see cref = "T:XAct.Xml.XmlNodeSerializer" /> class.
            </summary>
            <param name = "destinationType">Type of the destination.</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeSerializer.Serialize(System.Object)">
            <summary>
              Serializes the specified obj, returning it 
              as an XmlNode within a new XmlDocument 
              (it can then be cloned to a destination document).
            </summary>
            <param name = "value">The obj.</param>
            <returns>An XmlNode</returns>
        </member>
        <member name="M:XAct.Xml.XmlNodeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
              Deserialize the specified node into a typed object.
            </summary>
            <param name = "node">The XmlNode to deserialize.</param>
            <returns></returns>
        </member>
        <member name="T:XAct.Xml.XmlNodeWriter">
            <summary>
              XmlNodeWriter builds a tree of XmlNodes based on 
              the XmlWriter methods that are called.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.#ctor(System.Xml.XmlElement,System.Boolean)">
            <summary>
              Construct XmlNodeWriter for building the content of the given root XmlElement node.
            </summary>
            <param name = "root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
            <param name = "clearCurrentContents">Clear the current children of the given node</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.#ctor(System.Xml.XmlDocument)">
            <summary>
              Construct XmlNodeWriter for building the content of 
              the given root XmlDocument node.
              The current children of the given document are cleared.
            </summary>
            <param name = "root">The root document.</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.#ctor(System.Xml.XmlDocument,System.Boolean)">
            <summary>
              Construct XmlNodeWriter for building the content 
              of the given root XmlDocument node.
            </summary>
            <param name = "root">If root contains any content it will be completely replaced by what the XmlNodeWriter produces.</param>
            <param name = "clearCurrentContents">Clear the current children of the given node</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.Close">
            <summary>
              This auto-closes any open elements and puts the writer in the WriteState.Closed state.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.Flush">
            <summary>
              This is a noop.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.LookupPrefix(System.String)">
            <summary>
              Returns the result of GetPrefixOfNamespace on the current node.
            </summary>
            <param name = "ns">The namespaceURI to lookup the associated prefix for.</param>
            <returns>The prefix or null if no matching namespaceURI is in scope.</returns>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
              This method is implemented using Convert.ToBase64String.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
              This is implementd using a temporary XmlTextWriter to turn the 
              given binary blob into a string, then it calls WriteString with
              the result.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteCData(System.String)">
            <summary>
              Creates a System.Xml.XmlCDataSection node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteCharEntity(System.Char)">
            <summary>
              Writes the given char as a string.  The XmlDocument has no representation for 
              character entities, so the fact that this was called will be lost.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
              Calls WriteString with new string(buffer, index, count).
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteComment(System.String)">
            <summary>
              Creates an System.Xml.XmlComment node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
              Creates an System.Xml.XmlDocumentType node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteEndAttribute">
            <summary>
              Closes the previous WriteStartAttribute call.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteEndDocument">
            <summary>
              Closes any open elements and puts the writer back in the Start state.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteEndElement">
            <summary>
              Closes the previous WriteStartElement call.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteEntityRef(System.String)">
            <summary>
              Creates a System.Xml.XmlEntityReference node.
            </summary>
            <param name = "name">The name of the entity reference</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteFullEndElement">
            <summary>
              The DOM does not preserve this information, so this is equivalent to WriteEndElement.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteName(System.String)">
            <summary>
              Calls WriteString if the name is a valid XML name.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteNmToken(System.String)">
            <summary>
              Calls WriteString if the name is a valid XML NMTOKEN.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
              Creates a System.Xml.XmlProcessingInstruction node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
              Looks up the prefix in scope for the given namespace and calls WriteString
              with the prefix+":"+localName (or just localName if the prefix is the empty string).
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteRaw(System.String)">
            <summary>
              WriteRaw writes out the given string "unescaped", in other words it better be well formed XML markup.
              So for the XmlNodeWriter we parse this string and build the resulting tree, so it maps to setting the
              InnerXml property.
            </summary>
            <param name = "data"></param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
              Calls WriteRaw(string) with new string(buffer, index, count)
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
              Creates a System.Xml.XmlAttribute node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteStartDocument">
            <summary>
              Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
              writer is in the Start state, which only happens if the writer was constructed with an
              XmlDocument object.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteStartDocument(System.Boolean)">
            <summary>
              Writes the XmlDeclaration node with a standalone attribute.  This is only allowed when the
              writer is in the Start state, which only happens if the writer was constructed with an
              XmlDocument object.
            </summary>
            <param name = "standalone">If true, standalone attribute has value "yes" otherwise it has the value "no".</param>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
              Creates a System.Xml.XmlElement node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteString(System.String)">
            <summary>
              Creates a System.Xml.XmlText node.  If the current node is already an XmlText
              node it appends the text to that node.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
              Calls WriteString with the character data.
            </summary>
        </member>
        <member name="M:XAct.Xml.XmlNodeWriter.WriteWhitespace(System.String)">
            <summary>
              Create a System.Xml.XmlWhitespace node.
            </summary>
        </member>
        <member name="P:XAct.Xml.XmlNodeWriter.WriteState">
            <summary>
              Return the current state of the writer.
            </summary>
        </member>
        <member name="P:XAct.Xml.XmlNodeWriter.XmlLang">
            <summary>
              Return the current XmlLang state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
        </member>
        <member name="P:XAct.Xml.XmlNodeWriter.XmlSpace">
            <summary>
              Return the current XmlSpace state.  This does not have an efficient implementation, so use at your own risk.
            </summary>
        </member>
        <member name="T:XAct.ProcessManagerResult">
            <summary>
            A result package created when invoking a process.
            </summary>
        </member>
        <member name="P:XAct.ProcessManagerResult.ExitCode">
            <summary>
            The exit code returned by the process.
            <para>
            By Convention (only) a successful run is associated to the value zero.
            </para>
            </summary>
        </member>
        <member name="P:XAct.ProcessManagerResult.ProcessExited">
            <summary>
            If the process was waited for, return true if the process completed before timeout.
            </summary>
        </member>
        <member name="P:XAct.ProcessManagerResult.StandardOut">
            <summary>
            Gets the standard output text.
            </summary>
        </member>
        <member name="P:XAct.ProcessManagerResult.StandardError">
            <summary>
            Gets the standard error text if the process failed.
            </summary>
        </member>
        <member name="T:XAct.ProcessManager">
            <summary>
            A class to run Windows processes.
            </summary>
        </member>
        <member name="M:XAct.ProcessManager.InvokeProcess(System.String,System.String,System.String,System.Int32)">
            <summary>
            Invoke a Windows process and get the output.
            </summary>
            <param name="exePath"></param>
            <param name="arguments"></param>
            <param name="workingDirectory"></param>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="T:XAct.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.EnumValueNotFound">
            <summary>
              Looks up a localized string similar to Enum value not found..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsg_AValueIsRequired">
            <summary>
              Looks up a localized string similar to A value is required..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgArgumentCannotBeNotInitialized">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; cannot be not initialized (&apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgArgumentCannotBeNull">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; cannot be null or Empty..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgArgumentEnumValueCannotBeUndefined">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; Enum Value cannot be Undefined (0)..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgArgumentLengthCannotBeZero">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; Length cannot be 0..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgItemIsNotOfRightType">
            <summary>
              Looks up a localized string similar to Argument (of type &apos;{0}&apos;) is not of right Type (&apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ErrMsgValueCannotBeNull">
            <summary>
              Looks up a localized string similar to Value cannot be null or Empty..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.Exception_LengthMustByLargerThanZero">
            <summary>
              Looks up a localized string similar to length must be &gt; 0.
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ObjectExtensions_MakeUniqueIdentifier_Cannot_generate_UniqueKey_for_Null_objects_">
            <summary>
              Looks up a localized string similar to Cannot generate UniqueKey for Null objects..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ObjectExtensions_RegisterService_IoC_container_not_yet_handled_via_Reflection_">
            <summary>
              Looks up a localized string similar to DependencyInjectionContainer container not yet handled via Reflection..
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.String1">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.StringLengthMustBeLargerThanX">
            <summary>
              Looks up a localized string similar to length must be &gt; {0}.
            </summary>
        </member>
        <member name="P:XAct.Properties.Resources.ValidatorWarningSymbol">
            <summary>
              Looks up a localized string similar to *.
            </summary>
        </member>
    </members>
</doc>
